/*****************************************************************************************************************************/
/* RTICANMM_MAIN_CAN_2_RX_PORT */
/*                                                                                                                           */
/*   AUTHOR(S):                                                                                                              */
/*      U. Homann                                                                                                              */
/*      M. Eikermann                                                                                                              */
/*                                                                                                                           */
/*                                                                                                                           */
/*   RTICANMM Date: 06-Oct-2014 13:04:04                                                                                     */
/*   RTICANMM Version: 4.0.735878.5444907408                                                                                     */
/*                                                                                                                           */
/*  (c) Copyright 2016, dSPACE GmbH. All rights reserved.                                                                    */
/*      Brand names or product names are trademarks or registered trademarks of their respective companies or organizations. */
/*                                                                                                                           */
/* ***************************************************************************************************************************/

/* HighLowBeam.Reason_Preceding */ 
ssSetOutputPortDataType(S, 0, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 0, 1); 
/* HighLowBeam.Reason_Preceding_Grace */ 
ssSetOutputPortDataType(S, 1, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 1, 1); 
/* HighLowBeam.Reason_Oncoming */ 
ssSetOutputPortDataType(S, 2, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 2, 1); 
/* HighLowBeam.Reason_Oncoming_Grace */ 
ssSetOutputPortDataType(S, 3, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 3, 1); 
/* HighLowBeam.Reason_Street_Light */ 
ssSetOutputPortDataType(S, 4, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 4, 1); 
/* HighLowBeam.Reason_Street_Light_Grace */ 
ssSetOutputPortDataType(S, 5, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 5, 1); 
/* HighLowBeam.Reason_Lit_Night */ 
ssSetOutputPortDataType(S, 6, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 6, 1); 
/* HighLowBeam.Reason_Lit_Night_US */ 
ssSetOutputPortDataType(S, 7, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 7, 1); 
/* HighLowBeam.Reason_Low_speed */ 
ssSetOutputPortDataType(S, 8, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 8, 1); 
/* HighLowBeam.Reason_Bright_Scene */ 
ssSetOutputPortDataType(S, 9, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 9, 1); 
/* HighLowBeam.Reason_Sharp_Curve */ 
ssSetOutputPortDataType(S, 10, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 10, 1); 
/* HighLowBeam.Reason_Load_Balance */ 
ssSetOutputPortDataType(S, 11, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 11, 1); 
/* HighLowBeam.reserved_4 */ 
ssSetOutputPortDataType(S, 12, SS_UINT8); 
ssSetOutputPortWidth(S, 12, 1); 
/* HighLowBeam.HLB_decision */ 
ssSetOutputPortDataType(S, 13, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 13, 1); 
/* HighLowBeam.HLB_Running_Mode */ 
ssSetOutputPortDataType(S, 14, SS_UINT8); 
ssSetOutputPortWidth(S, 14, 1); 
/* HighLowBeam.Reason_for_HLB_Inactive */ 
ssSetOutputPortDataType(S, 15, SS_UINT8); 
ssSetOutputPortWidth(S, 15, 1); 
/* HighLowBeam.reserved_1 */ 
ssSetOutputPortDataType(S, 16, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 16, 1); 
/* HighLowBeam RX_STATUS */ 
ssSetOutputPortDataType(S, 17, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 17, 1); 
/* HighLowBeam time */ 
ssSetOutputPortDataType(S, 18, SS_DOUBLE); 
ssSetOutputPortWidth(S, 18, 1); 
/* HighLowBeam deltatime */ 
ssSetOutputPortDataType(S, 19, SS_DOUBLE); 
ssSetOutputPortWidth(S, 19, 1); 
/* IBEO1.HeaderCounter */ 
ssSetOutputPortDataType(S, 20, SS_UINT8); 
ssSetOutputPortWidth(S, 20, 1); 
/* IBEO1.ObjDataInfoFlag_vel */ 
ssSetOutputPortDataType(S, 21, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 21, 1); 
/* IBEO1.ObjDataInfoFlag_box */ 
ssSetOutputPortDataType(S, 22, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 22, 1); 
/* IBEO1.SensorTemp */ 
ssSetOutputPortDataType(S, 23, SS_INT8); 
ssSetOutputPortWidth(S, 23, 1); 
/* IBEO1.SensorViewRange */ 
ssSetOutputPortDataType(S, 24, SS_UINT8); 
ssSetOutputPortWidth(S, 24, 1); 
/* IBEO1.NumberOfObject */ 
ssSetOutputPortDataType(S, 25, SS_UINT8); 
ssSetOutputPortWidth(S, 25, 1); 
/* IBEO1.Version */ 
ssSetOutputPortDataType(S, 26, SS_UINT8); 
ssSetOutputPortWidth(S, 26, 1); 
/* IBEO1 RX_STATUS */ 
ssSetOutputPortDataType(S, 27, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 27, 1); 
/* IBEO1 time */ 
ssSetOutputPortDataType(S, 28, SS_DOUBLE); 
ssSetOutputPortWidth(S, 28, 1); 
/* IBEO1 deltatime */ 
ssSetOutputPortDataType(S, 29, SS_DOUBLE); 
ssSetOutputPortWidth(S, 29, 1); 
/* IBEO2.NTP_fractional_seconds */ 
ssSetOutputPortDataType(S, 30, SS_UINT32); 
ssSetOutputPortWidth(S, 30, 1); 
/* IBEO2.NTP_seconds */ 
ssSetOutputPortDataType(S, 31, SS_UINT32); 
ssSetOutputPortWidth(S, 31, 1); 
/* IBEO2 RX_STATUS */ 
ssSetOutputPortDataType(S, 32, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 32, 1); 
/* IBEO2 time */ 
ssSetOutputPortDataType(S, 33, SS_DOUBLE); 
ssSetOutputPortWidth(S, 33, 1); 
/* IBEO2 deltatime */ 
ssSetOutputPortDataType(S, 34, SS_DOUBLE); 
ssSetOutputPortWidth(S, 34, 1); 
/* IBEO3.VelocityY */ 
ssSetOutputPortDataType(S, 35, SS_INT16); 
ssSetOutputPortWidth(S, 35, 1); 
/* IBEO3.VelocityX */ 
ssSetOutputPortDataType(S, 36, SS_INT16); 
ssSetOutputPortWidth(S, 36, 1); 
/* IBEO3.PositionY */ 
ssSetOutputPortDataType(S, 37, SS_INT16); 
ssSetOutputPortWidth(S, 37, 1); 
/* IBEO3.PositionX */ 
ssSetOutputPortDataType(S, 38, SS_INT16); 
ssSetOutputPortWidth(S, 38, 1); 
/* IBEO3.ObjID */ 
ssSetOutputPortDataType(S, 39, SS_UINT8); 
ssSetOutputPortWidth(S, 39, 1); 
/* IBEO3 RX_STATUS */ 
ssSetOutputPortDataType(S, 40, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 40, 1); 
/* IBEO3 time */ 
ssSetOutputPortDataType(S, 41, SS_DOUBLE); 
ssSetOutputPortWidth(S, 41, 1); 
/* IBEO3 deltatime */ 
ssSetOutputPortDataType(S, 42, SS_DOUBLE); 
ssSetOutputPortWidth(S, 42, 1); 
/* IBEO4.VelocityYSigma */ 
ssSetOutputPortDataType(S, 43, SS_UINT8); 
ssSetOutputPortWidth(S, 43, 1); 
/* IBEO4.VelocityXSigma */ 
ssSetOutputPortDataType(S, 44, SS_UINT8); 
ssSetOutputPortWidth(S, 44, 1); 
/* IBEO4.PositionYSigma */ 
ssSetOutputPortDataType(S, 45, SS_UINT8); 
ssSetOutputPortWidth(S, 45, 1); 
/* IBEO4.PositionXSigma */ 
ssSetOutputPortDataType(S, 46, SS_UINT8); 
ssSetOutputPortWidth(S, 46, 1); 
/* IBEO4.ObjTimeOffset */ 
ssSetOutputPortDataType(S, 47, SS_UINT8); 
ssSetOutputPortWidth(S, 47, 1); 
/* IBEO4.ObjPredictionAge */ 
ssSetOutputPortDataType(S, 48, SS_UINT8); 
ssSetOutputPortWidth(S, 48, 1); 
/* IBEO4.ObjAge */ 
ssSetOutputPortDataType(S, 49, SS_UINT8); 
ssSetOutputPortWidth(S, 49, 1); 
/* IBEO4.ObjID */ 
ssSetOutputPortDataType(S, 50, SS_UINT8); 
ssSetOutputPortWidth(S, 50, 1); 
/* IBEO4 RX_STATUS */ 
ssSetOutputPortDataType(S, 51, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 51, 1); 
/* IBEO4 time */ 
ssSetOutputPortDataType(S, 52, SS_DOUBLE); 
ssSetOutputPortWidth(S, 52, 1); 
/* IBEO4 deltatime */ 
ssSetOutputPortDataType(S, 53, SS_DOUBLE); 
ssSetOutputPortWidth(S, 53, 1); 
/* IBEO5.BoxCenterY */ 
ssSetOutputPortDataType(S, 54, SS_INT16); 
ssSetOutputPortWidth(S, 54, 1); 
/* IBEO5.BoxCenterX */ 
ssSetOutputPortDataType(S, 55, SS_INT16); 
ssSetOutputPortWidth(S, 55, 1); 
/* IBEO5.ObjClassAge */ 
ssSetOutputPortDataType(S, 56, SS_UINT8); 
ssSetOutputPortWidth(S, 56, 1); 
/* IBEO5.ObjClassCertainty */ 
ssSetOutputPortDataType(S, 57, SS_UINT8); 
ssSetOutputPortWidth(S, 57, 1); 
/* IBEO5.ObjClassification */ 
ssSetOutputPortDataType(S, 58, SS_UINT8); 
ssSetOutputPortWidth(S, 58, 1); 
/* IBEO5.ObjID */ 
ssSetOutputPortDataType(S, 59, SS_UINT8); 
ssSetOutputPortWidth(S, 59, 1); 
/* IBEO5 RX_STATUS */ 
ssSetOutputPortDataType(S, 60, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 60, 1); 
/* IBEO5 time */ 
ssSetOutputPortDataType(S, 61, SS_DOUBLE); 
ssSetOutputPortWidth(S, 61, 1); 
/* IBEO5 deltatime */ 
ssSetOutputPortDataType(S, 62, SS_DOUBLE); 
ssSetOutputPortWidth(S, 62, 1); 
/* IBEO6.BoxOrientation */ 
ssSetOutputPortDataType(S, 63, SS_INT16); 
ssSetOutputPortWidth(S, 63, 1); 
/* IBEO6.BoxSizeY */ 
ssSetOutputPortDataType(S, 64, SS_UINT16); 
ssSetOutputPortWidth(S, 64, 1); 
/* IBEO6.BoxSizeX */ 
ssSetOutputPortDataType(S, 65, SS_UINT16); 
ssSetOutputPortWidth(S, 65, 1); 
/* IBEO6.ObjID */ 
ssSetOutputPortDataType(S, 66, SS_UINT8); 
ssSetOutputPortWidth(S, 66, 1); 
/* IBEO6 RX_STATUS */ 
ssSetOutputPortDataType(S, 67, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 67, 1); 
/* IBEO6 time */ 
ssSetOutputPortDataType(S, 68, SS_DOUBLE); 
ssSetOutputPortWidth(S, 68, 1); 
/* IBEO6 deltatime */ 
ssSetOutputPortDataType(S, 69, SS_DOUBLE); 
ssSetOutputPortWidth(S, 69, 1); 
/* IBEO7.StartPointY */ 
ssSetOutputPortDataType(S, 70, SS_INT16); 
ssSetOutputPortWidth(S, 70, 1); 
/* IBEO7.StartPointX */ 
ssSetOutputPortDataType(S, 71, SS_INT16); 
ssSetOutputPortWidth(S, 71, 1); 
/* IBEO7.ClosestContourPointNum */ 
ssSetOutputPortDataType(S, 72, SS_UINT8); 
ssSetOutputPortWidth(S, 72, 1); 
/* IBEO7.NumberOfContourPoints */ 
ssSetOutputPortDataType(S, 73, SS_UINT8); 
ssSetOutputPortWidth(S, 73, 1); 
/* IBEO7.ObjID */ 
ssSetOutputPortDataType(S, 74, SS_UINT8); 
ssSetOutputPortWidth(S, 74, 1); 
/* IBEO7 RX_STATUS */ 
ssSetOutputPortDataType(S, 75, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 75, 1); 
/* IBEO7 time */ 
ssSetOutputPortDataType(S, 76, SS_DOUBLE); 
ssSetOutputPortWidth(S, 76, 1); 
/* IBEO7 deltatime */ 
ssSetOutputPortDataType(S, 77, SS_DOUBLE); 
ssSetOutputPortWidth(S, 77, 1); 
/* IBEO8.yOffset3 */ 
ssSetOutputPortDataType(S, 78, SS_UINT8); 
ssSetOutputPortWidth(S, 78, 1); 
/* IBEO8.xOffset3 */ 
ssSetOutputPortDataType(S, 79, SS_UINT8); 
ssSetOutputPortWidth(S, 79, 1); 
/* IBEO8.yOffset2 */ 
ssSetOutputPortDataType(S, 80, SS_UINT8); 
ssSetOutputPortWidth(S, 80, 1); 
/* IBEO8.xOffset2 */ 
ssSetOutputPortDataType(S, 81, SS_UINT8); 
ssSetOutputPortWidth(S, 81, 1); 
/* IBEO8.yOffset */ 
ssSetOutputPortDataType(S, 82, SS_UINT8); 
ssSetOutputPortWidth(S, 82, 1); 
/* IBEO8.xOffset */ 
ssSetOutputPortDataType(S, 83, SS_UINT8); 
ssSetOutputPortWidth(S, 83, 1); 
/* IBEO8.ContourMessageNum */ 
ssSetOutputPortDataType(S, 84, SS_UINT8); 
ssSetOutputPortWidth(S, 84, 1); 
/* IBEO8.ObjID */ 
ssSetOutputPortDataType(S, 85, SS_UINT8); 
ssSetOutputPortWidth(S, 85, 1); 
/* IBEO8 RX_STATUS */ 
ssSetOutputPortDataType(S, 86, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 86, 1); 
/* IBEO8 time */ 
ssSetOutputPortDataType(S, 87, SS_DOUBLE); 
ssSetOutputPortWidth(S, 87, 1); 
/* IBEO8 deltatime */ 
ssSetOutputPortDataType(S, 88, SS_DOUBLE); 
ssSetOutputPortWidth(S, 88, 1); 
/* LKA_Left_Lane_A.Lane_Type */ 
ssSetOutputPortDataType(S, 89, SS_UINT8); 
ssSetOutputPortWidth(S, 89, 1); 
/* LKA_Left_Lane_A.Quality */ 
ssSetOutputPortDataType(S, 90, SS_UINT8); 
ssSetOutputPortWidth(S, 90, 1); 
/* LKA_Left_Lane_A.Position */ 
ssSetOutputPortDataType(S, 91, SS_DOUBLE); 
ssSetOutputPortWidth(S, 91, 1); 
/* LKA_Left_Lane_A.Curvature */ 
ssSetOutputPortDataType(S, 92, SS_DOUBLE); 
ssSetOutputPortWidth(S, 92, 1); 
/* LKA_Left_Lane_A.Curvature_Derivative */ 
ssSetOutputPortDataType(S, 93, SS_DOUBLE); 
ssSetOutputPortWidth(S, 93, 1); 
/* LKA_Left_Lane_A.Width_left_marking */ 
ssSetOutputPortDataType(S, 94, SS_DOUBLE); 
ssSetOutputPortWidth(S, 94, 1); 
/* LKA_Left_Lane_A RX_STATUS */ 
ssSetOutputPortDataType(S, 95, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 95, 1); 
/* LKA_Left_Lane_A time */ 
ssSetOutputPortDataType(S, 96, SS_DOUBLE); 
ssSetOutputPortWidth(S, 96, 1); 
/* LKA_Left_Lane_A deltatime */ 
ssSetOutputPortDataType(S, 97, SS_DOUBLE); 
ssSetOutputPortWidth(S, 97, 1); 
/* LKA_Left_Lane_B.Heading_Angle */ 
ssSetOutputPortDataType(S, 98, SS_DOUBLE); 
ssSetOutputPortWidth(S, 98, 1); 
/* LKA_Left_Lane_B.View_Range_Start */ 
ssSetOutputPortDataType(S, 99, SS_DOUBLE); 
ssSetOutputPortWidth(S, 99, 1); 
/* LKA_Left_Lane_B.View_Range_End */ 
ssSetOutputPortDataType(S, 100, SS_DOUBLE); 
ssSetOutputPortWidth(S, 100, 1); 
/* LKA_Left_Lane_B.Lane_Crossing */ 
ssSetOutputPortDataType(S, 101, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 101, 1); 
/* LKA_Left_Lane_B.Lane_mark_color */ 
ssSetOutputPortDataType(S, 102, SS_UINT8); 
ssSetOutputPortWidth(S, 102, 1); 
/* LKA_Left_Lane_B.PRED_DIST_BASED_EXTRAPOLATION */ 
ssSetOutputPortDataType(S, 103, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 103, 1); 
/* LKA_Left_Lane_B.PRED_OTHER_SIDE */ 
ssSetOutputPortDataType(S, 104, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 104, 1); 
/* LKA_Left_Lane_B.PRED_OVERRIDE */ 
ssSetOutputPortDataType(S, 105, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 105, 1); 
/* LKA_Left_Lane_B.PRED_OCCLUDED_LM_EXTRAPOLATION */ 
ssSetOutputPortDataType(S, 106, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 106, 1); 
/* LKA_Left_Lane_B.PRED_HEADWAY_ORIENTED */ 
ssSetOutputPortDataType(S, 107, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 107, 1); 
/* LKA_Left_Lane_B.Reserved1_laneB */ 
ssSetOutputPortDataType(S, 108, SS_UINT8); 
ssSetOutputPortWidth(S, 108, 1); 
/* LKA_Left_Lane_B.PRED_SOURCE_DIVERGING_LANES */ 
ssSetOutputPortDataType(S, 109, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 109, 1); 
/* LKA_Left_Lane_B.PRED_SOURCE_GUARDRAIL_SHADOW */ 
ssSetOutputPortDataType(S, 110, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 110, 1); 
/* LKA_Left_Lane_B.PRED_SOURCE_HWE_SPAIN */ 
ssSetOutputPortDataType(S, 111, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 111, 1); 
/* LKA_Left_Lane_B.PRED_SOURCE_STD */ 
ssSetOutputPortDataType(S, 112, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 112, 1); 
/* LKA_Left_Lane_B.PRED_SOURCE_VRTL_MERGE */ 
ssSetOutputPortDataType(S, 113, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 113, 1); 
/* LKA_Left_Lane_B.TLC */ 
ssSetOutputPortDataType(S, 114, SS_DOUBLE); 
ssSetOutputPortWidth(S, 114, 1); 
/* LKA_Left_Lane_B RX_STATUS */ 
ssSetOutputPortDataType(S, 115, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 115, 1); 
/* LKA_Left_Lane_B time */ 
ssSetOutputPortDataType(S, 116, SS_DOUBLE); 
ssSetOutputPortWidth(S, 116, 1); 
/* LKA_Left_Lane_B deltatime */ 
ssSetOutputPortDataType(S, 117, SS_DOUBLE); 
ssSetOutputPortWidth(S, 117, 1); 
/* LKA_Right_Lane_A.Lane_Type */ 
ssSetOutputPortDataType(S, 118, SS_UINT8); 
ssSetOutputPortWidth(S, 118, 1); 
/* LKA_Right_Lane_A.Quality */ 
ssSetOutputPortDataType(S, 119, SS_UINT8); 
ssSetOutputPortWidth(S, 119, 1); 
/* LKA_Right_Lane_A.Position */ 
ssSetOutputPortDataType(S, 120, SS_DOUBLE); 
ssSetOutputPortWidth(S, 120, 1); 
/* LKA_Right_Lane_A.Curvature */ 
ssSetOutputPortDataType(S, 121, SS_DOUBLE); 
ssSetOutputPortWidth(S, 121, 1); 
/* LKA_Right_Lane_A.Curvature_Derivative */ 
ssSetOutputPortDataType(S, 122, SS_DOUBLE); 
ssSetOutputPortWidth(S, 122, 1); 
/* LKA_Right_Lane_A.Width_right_marking */ 
ssSetOutputPortDataType(S, 123, SS_DOUBLE); 
ssSetOutputPortWidth(S, 123, 1); 
/* LKA_Right_Lane_A RX_STATUS */ 
ssSetOutputPortDataType(S, 124, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 124, 1); 
/* LKA_Right_Lane_A time */ 
ssSetOutputPortDataType(S, 125, SS_DOUBLE); 
ssSetOutputPortWidth(S, 125, 1); 
/* LKA_Right_Lane_A deltatime */ 
ssSetOutputPortDataType(S, 126, SS_DOUBLE); 
ssSetOutputPortWidth(S, 126, 1); 
/* LKA_Right_Lane_B.Heading_Angle */ 
ssSetOutputPortDataType(S, 127, SS_DOUBLE); 
ssSetOutputPortWidth(S, 127, 1); 
/* LKA_Right_Lane_B.View_Range_Start */ 
ssSetOutputPortDataType(S, 128, SS_DOUBLE); 
ssSetOutputPortWidth(S, 128, 1); 
/* LKA_Right_Lane_B.View_Range_End */ 
ssSetOutputPortDataType(S, 129, SS_DOUBLE); 
ssSetOutputPortWidth(S, 129, 1); 
/* LKA_Right_Lane_B.Lane_Crossing */ 
ssSetOutputPortDataType(S, 130, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 130, 1); 
/* LKA_Right_Lane_B.Lane_mark_color */ 
ssSetOutputPortDataType(S, 131, SS_UINT8); 
ssSetOutputPortWidth(S, 131, 1); 
/* LKA_Right_Lane_B.PRED_DIST_BASED_EXTRAPOLATION */ 
ssSetOutputPortDataType(S, 132, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 132, 1); 
/* LKA_Right_Lane_B.PRED_OTHER_SIDE */ 
ssSetOutputPortDataType(S, 133, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 133, 1); 
/* LKA_Right_Lane_B.PRED_OVERRIDE */ 
ssSetOutputPortDataType(S, 134, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 134, 1); 
/* LKA_Right_Lane_B.PRED_OCCLUDED_LM_EXTRAPOLATION */ 
ssSetOutputPortDataType(S, 135, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 135, 1); 
/* LKA_Right_Lane_B.PRED_HEADWAY_ORIENTED */ 
ssSetOutputPortDataType(S, 136, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 136, 1); 
/* LKA_Right_Lane_B.Reserved1_laneB */ 
ssSetOutputPortDataType(S, 137, SS_UINT8); 
ssSetOutputPortWidth(S, 137, 1); 
/* LKA_Right_Lane_B.PRED_SOURCE_DIVERGING_LANES */ 
ssSetOutputPortDataType(S, 138, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 138, 1); 
/* LKA_Right_Lane_B.PRED_SOURCE_GUARDRAIL_SHADOW */ 
ssSetOutputPortDataType(S, 139, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 139, 1); 
/* LKA_Right_Lane_B.PRED_SOURCE_HWE_SPAIN */ 
ssSetOutputPortDataType(S, 140, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 140, 1); 
/* LKA_Right_Lane_B.PRED_SOURCE_STD */ 
ssSetOutputPortDataType(S, 141, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 141, 1); 
/* LKA_Right_Lane_B.PRED_SOURCE_VRTL_MERGE */ 
ssSetOutputPortDataType(S, 142, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 142, 1); 
/* LKA_Right_Lane_B.TLC */ 
ssSetOutputPortDataType(S, 143, SS_DOUBLE); 
ssSetOutputPortWidth(S, 143, 1); 
/* LKA_Right_Lane_B RX_STATUS */ 
ssSetOutputPortDataType(S, 144, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 144, 1); 
/* LKA_Right_Lane_B time */ 
ssSetOutputPortDataType(S, 145, SS_DOUBLE); 
ssSetOutputPortWidth(S, 145, 1); 
/* LKA_Right_Lane_B deltatime */ 
ssSetOutputPortDataType(S, 146, SS_DOUBLE); 
ssSetOutputPortWidth(S, 146, 1); 
/* Next_Left_Lane_A.Lane_Type */ 
ssSetOutputPortDataType(S, 147, SS_UINT8); 
ssSetOutputPortWidth(S, 147, 1); 
/* Next_Left_Lane_A.Quality */ 
ssSetOutputPortDataType(S, 148, SS_UINT8); 
ssSetOutputPortWidth(S, 148, 1); 
/* Next_Left_Lane_A.Position */ 
ssSetOutputPortDataType(S, 149, SS_DOUBLE); 
ssSetOutputPortWidth(S, 149, 1); 
/* Next_Left_Lane_A.Curvature */ 
ssSetOutputPortDataType(S, 150, SS_DOUBLE); 
ssSetOutputPortWidth(S, 150, 1); 
/* Next_Left_Lane_A.Curvature_Derivative */ 
ssSetOutputPortDataType(S, 151, SS_DOUBLE); 
ssSetOutputPortWidth(S, 151, 1); 
/* Next_Left_Lane_A.Lane_mark_width */ 
ssSetOutputPortDataType(S, 152, SS_DOUBLE); 
ssSetOutputPortWidth(S, 152, 1); 
/* Next_Left_Lane_A RX_STATUS */ 
ssSetOutputPortDataType(S, 153, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 153, 1); 
/* Next_Left_Lane_A time */ 
ssSetOutputPortDataType(S, 154, SS_DOUBLE); 
ssSetOutputPortWidth(S, 154, 1); 
/* Next_Left_Lane_A deltatime */ 
ssSetOutputPortDataType(S, 155, SS_DOUBLE); 
ssSetOutputPortWidth(S, 155, 1); 
/* Next_Left_Lane_B.Heading_Angle */ 
ssSetOutputPortDataType(S, 156, SS_DOUBLE); 
ssSetOutputPortWidth(S, 156, 1); 
/* Next_Left_Lane_B.View_Range_Start */ 
ssSetOutputPortDataType(S, 157, SS_DOUBLE); 
ssSetOutputPortWidth(S, 157, 1); 
/* Next_Left_Lane_B.View_Range_End */ 
ssSetOutputPortDataType(S, 158, SS_DOUBLE); 
ssSetOutputPortWidth(S, 158, 1); 
/* Next_Left_Lane_B RX_STATUS */ 
ssSetOutputPortDataType(S, 159, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 159, 1); 
/* Next_Left_Lane_B time */ 
ssSetOutputPortDataType(S, 160, SS_DOUBLE); 
ssSetOutputPortWidth(S, 160, 1); 
/* Next_Left_Lane_B deltatime */ 
ssSetOutputPortDataType(S, 161, SS_DOUBLE); 
ssSetOutputPortWidth(S, 161, 1); 
/* Next_Right_Lane_A.Lane_Type */ 
ssSetOutputPortDataType(S, 162, SS_UINT8); 
ssSetOutputPortWidth(S, 162, 1); 
/* Next_Right_Lane_A.Quality */ 
ssSetOutputPortDataType(S, 163, SS_UINT8); 
ssSetOutputPortWidth(S, 163, 1); 
/* Next_Right_Lane_A.Position */ 
ssSetOutputPortDataType(S, 164, SS_DOUBLE); 
ssSetOutputPortWidth(S, 164, 1); 
/* Next_Right_Lane_A.Curvature */ 
ssSetOutputPortDataType(S, 165, SS_DOUBLE); 
ssSetOutputPortWidth(S, 165, 1); 
/* Next_Right_Lane_A.Curvature_Derivative */ 
ssSetOutputPortDataType(S, 166, SS_DOUBLE); 
ssSetOutputPortWidth(S, 166, 1); 
/* Next_Right_Lane_A.Lane_mark_width */ 
ssSetOutputPortDataType(S, 167, SS_DOUBLE); 
ssSetOutputPortWidth(S, 167, 1); 
/* Next_Right_Lane_A RX_STATUS */ 
ssSetOutputPortDataType(S, 168, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 168, 1); 
/* Next_Right_Lane_A time */ 
ssSetOutputPortDataType(S, 169, SS_DOUBLE); 
ssSetOutputPortWidth(S, 169, 1); 
/* Next_Right_Lane_A deltatime */ 
ssSetOutputPortDataType(S, 170, SS_DOUBLE); 
ssSetOutputPortWidth(S, 170, 1); 
/* Next_Right_Lane_B.Heading_Angle */ 
ssSetOutputPortDataType(S, 171, SS_DOUBLE); 
ssSetOutputPortWidth(S, 171, 1); 
/* Next_Right_Lane_B.View_Range_Start */ 
ssSetOutputPortDataType(S, 172, SS_DOUBLE); 
ssSetOutputPortWidth(S, 172, 1); 
/* Next_Right_Lane_B.View_Range_End */ 
ssSetOutputPortDataType(S, 173, SS_DOUBLE); 
ssSetOutputPortWidth(S, 173, 1); 
/* Next_Right_Lane_B RX_STATUS */ 
ssSetOutputPortDataType(S, 174, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 174, 1); 
/* Next_Right_Lane_B time */ 
ssSetOutputPortDataType(S, 175, SS_DOUBLE); 
ssSetOutputPortWidth(S, 175, 1); 
/* Next_Right_Lane_B deltatime */ 
ssSetOutputPortDataType(S, 176, SS_DOUBLE); 
ssSetOutputPortWidth(S, 176, 1); 
/* ObstacleDataA1.ObstacleID */ 
ssSetOutputPortDataType(S, 177, SS_UINT8); 
ssSetOutputPortWidth(S, 177, 1); 
/* ObstacleDataA1.ObstaclePosX */ 
ssSetOutputPortDataType(S, 178, SS_DOUBLE); 
ssSetOutputPortWidth(S, 178, 1); 
/* ObstacleDataA1.reserved_4 */ 
ssSetOutputPortDataType(S, 179, SS_UINT8); 
ssSetOutputPortWidth(S, 179, 1); 
/* ObstacleDataA1.ObstaclePosY */ 
ssSetOutputPortDataType(S, 180, SS_DOUBLE); 
ssSetOutputPortWidth(S, 180, 1); 
/* ObstacleDataA1.BlinkerInfo */ 
ssSetOutputPortDataType(S, 181, SS_UINT8); 
ssSetOutputPortWidth(S, 181, 1); 
/* ObstacleDataA1.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 182, SS_UINT8); 
ssSetOutputPortWidth(S, 182, 1); 
/* ObstacleDataA1.ObstacleVelX */ 
ssSetOutputPortDataType(S, 183, SS_DOUBLE); 
ssSetOutputPortWidth(S, 183, 1); 
/* ObstacleDataA1.ObstacleType */ 
ssSetOutputPortDataType(S, 184, SS_UINT8); 
ssSetOutputPortWidth(S, 184, 1); 
/* ObstacleDataA1.reserved_1 */ 
ssSetOutputPortDataType(S, 185, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 185, 1); 
/* ObstacleDataA1.ObstacleStatus */ 
ssSetOutputPortDataType(S, 186, SS_UINT8); 
ssSetOutputPortWidth(S, 186, 1); 
/* ObstacleDataA1.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 187, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 187, 1); 
/* ObstacleDataA1.reserved_2 */ 
ssSetOutputPortDataType(S, 188, SS_UINT8); 
ssSetOutputPortWidth(S, 188, 1); 
/* ObstacleDataA1.ObstacleValid */ 
ssSetOutputPortDataType(S, 189, SS_UINT8); 
ssSetOutputPortWidth(S, 189, 1); 
/* ObstacleDataA1 RX_STATUS */ 
ssSetOutputPortDataType(S, 190, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 190, 1); 
/* ObstacleDataA1 time */ 
ssSetOutputPortDataType(S, 191, SS_DOUBLE); 
ssSetOutputPortWidth(S, 191, 1); 
/* ObstacleDataA1 deltatime */ 
ssSetOutputPortDataType(S, 192, SS_DOUBLE); 
ssSetOutputPortWidth(S, 192, 1); 
/* ObstacleDataA10.ObstacleID */ 
ssSetOutputPortDataType(S, 193, SS_UINT8); 
ssSetOutputPortWidth(S, 193, 1); 
/* ObstacleDataA10.ObstaclePosX */ 
ssSetOutputPortDataType(S, 194, SS_DOUBLE); 
ssSetOutputPortWidth(S, 194, 1); 
/* ObstacleDataA10.reserved_4 */ 
ssSetOutputPortDataType(S, 195, SS_UINT8); 
ssSetOutputPortWidth(S, 195, 1); 
/* ObstacleDataA10.ObstaclePosY */ 
ssSetOutputPortDataType(S, 196, SS_DOUBLE); 
ssSetOutputPortWidth(S, 196, 1); 
/* ObstacleDataA10.BlinkerInfo */ 
ssSetOutputPortDataType(S, 197, SS_UINT8); 
ssSetOutputPortWidth(S, 197, 1); 
/* ObstacleDataA10.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 198, SS_UINT8); 
ssSetOutputPortWidth(S, 198, 1); 
/* ObstacleDataA10.ObstacleVelX */ 
ssSetOutputPortDataType(S, 199, SS_DOUBLE); 
ssSetOutputPortWidth(S, 199, 1); 
/* ObstacleDataA10.ObstacleType */ 
ssSetOutputPortDataType(S, 200, SS_UINT8); 
ssSetOutputPortWidth(S, 200, 1); 
/* ObstacleDataA10.reserved_1 */ 
ssSetOutputPortDataType(S, 201, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 201, 1); 
/* ObstacleDataA10.ObstacleStatus */ 
ssSetOutputPortDataType(S, 202, SS_UINT8); 
ssSetOutputPortWidth(S, 202, 1); 
/* ObstacleDataA10.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 203, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 203, 1); 
/* ObstacleDataA10.reserved_2 */ 
ssSetOutputPortDataType(S, 204, SS_UINT8); 
ssSetOutputPortWidth(S, 204, 1); 
/* ObstacleDataA10.ObstacleValid */ 
ssSetOutputPortDataType(S, 205, SS_UINT8); 
ssSetOutputPortWidth(S, 205, 1); 
/* ObstacleDataA10 RX_STATUS */ 
ssSetOutputPortDataType(S, 206, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 206, 1); 
/* ObstacleDataA10 time */ 
ssSetOutputPortDataType(S, 207, SS_DOUBLE); 
ssSetOutputPortWidth(S, 207, 1); 
/* ObstacleDataA10 deltatime */ 
ssSetOutputPortDataType(S, 208, SS_DOUBLE); 
ssSetOutputPortWidth(S, 208, 1); 
/* ObstacleDataA2.ObstacleID */ 
ssSetOutputPortDataType(S, 209, SS_UINT8); 
ssSetOutputPortWidth(S, 209, 1); 
/* ObstacleDataA2.ObstaclePosX */ 
ssSetOutputPortDataType(S, 210, SS_DOUBLE); 
ssSetOutputPortWidth(S, 210, 1); 
/* ObstacleDataA2.reserved_4 */ 
ssSetOutputPortDataType(S, 211, SS_UINT8); 
ssSetOutputPortWidth(S, 211, 1); 
/* ObstacleDataA2.ObstaclePosY */ 
ssSetOutputPortDataType(S, 212, SS_DOUBLE); 
ssSetOutputPortWidth(S, 212, 1); 
/* ObstacleDataA2.BlinkerInfo */ 
ssSetOutputPortDataType(S, 213, SS_UINT8); 
ssSetOutputPortWidth(S, 213, 1); 
/* ObstacleDataA2.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 214, SS_UINT8); 
ssSetOutputPortWidth(S, 214, 1); 
/* ObstacleDataA2.ObstacleVelX */ 
ssSetOutputPortDataType(S, 215, SS_DOUBLE); 
ssSetOutputPortWidth(S, 215, 1); 
/* ObstacleDataA2.ObstacleType */ 
ssSetOutputPortDataType(S, 216, SS_UINT8); 
ssSetOutputPortWidth(S, 216, 1); 
/* ObstacleDataA2.reserved_1 */ 
ssSetOutputPortDataType(S, 217, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 217, 1); 
/* ObstacleDataA2.ObstacleStatus */ 
ssSetOutputPortDataType(S, 218, SS_UINT8); 
ssSetOutputPortWidth(S, 218, 1); 
/* ObstacleDataA2.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 219, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 219, 1); 
/* ObstacleDataA2.reserved_2 */ 
ssSetOutputPortDataType(S, 220, SS_UINT8); 
ssSetOutputPortWidth(S, 220, 1); 
/* ObstacleDataA2.ObstacleValid */ 
ssSetOutputPortDataType(S, 221, SS_UINT8); 
ssSetOutputPortWidth(S, 221, 1); 
/* ObstacleDataA2 RX_STATUS */ 
ssSetOutputPortDataType(S, 222, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 222, 1); 
/* ObstacleDataA2 time */ 
ssSetOutputPortDataType(S, 223, SS_DOUBLE); 
ssSetOutputPortWidth(S, 223, 1); 
/* ObstacleDataA2 deltatime */ 
ssSetOutputPortDataType(S, 224, SS_DOUBLE); 
ssSetOutputPortWidth(S, 224, 1); 
/* ObstacleDataA3.ObstacleID */ 
ssSetOutputPortDataType(S, 225, SS_UINT8); 
ssSetOutputPortWidth(S, 225, 1); 
/* ObstacleDataA3.ObstaclePosX */ 
ssSetOutputPortDataType(S, 226, SS_DOUBLE); 
ssSetOutputPortWidth(S, 226, 1); 
/* ObstacleDataA3.reserved_4 */ 
ssSetOutputPortDataType(S, 227, SS_UINT8); 
ssSetOutputPortWidth(S, 227, 1); 
/* ObstacleDataA3.ObstaclePosY */ 
ssSetOutputPortDataType(S, 228, SS_DOUBLE); 
ssSetOutputPortWidth(S, 228, 1); 
/* ObstacleDataA3.BlinkerInfo */ 
ssSetOutputPortDataType(S, 229, SS_UINT8); 
ssSetOutputPortWidth(S, 229, 1); 
/* ObstacleDataA3.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 230, SS_UINT8); 
ssSetOutputPortWidth(S, 230, 1); 
/* ObstacleDataA3.ObstacleVelX */ 
ssSetOutputPortDataType(S, 231, SS_DOUBLE); 
ssSetOutputPortWidth(S, 231, 1); 
/* ObstacleDataA3.ObstacleType */ 
ssSetOutputPortDataType(S, 232, SS_UINT8); 
ssSetOutputPortWidth(S, 232, 1); 
/* ObstacleDataA3.reserved_1 */ 
ssSetOutputPortDataType(S, 233, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 233, 1); 
/* ObstacleDataA3.ObstacleStatus */ 
ssSetOutputPortDataType(S, 234, SS_UINT8); 
ssSetOutputPortWidth(S, 234, 1); 
/* ObstacleDataA3.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 235, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 235, 1); 
/* ObstacleDataA3.reserved_2 */ 
ssSetOutputPortDataType(S, 236, SS_UINT8); 
ssSetOutputPortWidth(S, 236, 1); 
/* ObstacleDataA3.ObstacleValid */ 
ssSetOutputPortDataType(S, 237, SS_UINT8); 
ssSetOutputPortWidth(S, 237, 1); 
/* ObstacleDataA3 RX_STATUS */ 
ssSetOutputPortDataType(S, 238, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 238, 1); 
/* ObstacleDataA3 time */ 
ssSetOutputPortDataType(S, 239, SS_DOUBLE); 
ssSetOutputPortWidth(S, 239, 1); 
/* ObstacleDataA3 deltatime */ 
ssSetOutputPortDataType(S, 240, SS_DOUBLE); 
ssSetOutputPortWidth(S, 240, 1); 
/* ObstacleDataA4.ObstacleID */ 
ssSetOutputPortDataType(S, 241, SS_UINT8); 
ssSetOutputPortWidth(S, 241, 1); 
/* ObstacleDataA4.ObstaclePosX */ 
ssSetOutputPortDataType(S, 242, SS_DOUBLE); 
ssSetOutputPortWidth(S, 242, 1); 
/* ObstacleDataA4.reserved_4 */ 
ssSetOutputPortDataType(S, 243, SS_UINT8); 
ssSetOutputPortWidth(S, 243, 1); 
/* ObstacleDataA4.ObstaclePosY */ 
ssSetOutputPortDataType(S, 244, SS_DOUBLE); 
ssSetOutputPortWidth(S, 244, 1); 
/* ObstacleDataA4.BlinkerInfo */ 
ssSetOutputPortDataType(S, 245, SS_UINT8); 
ssSetOutputPortWidth(S, 245, 1); 
/* ObstacleDataA4.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 246, SS_UINT8); 
ssSetOutputPortWidth(S, 246, 1); 
/* ObstacleDataA4.ObstacleVelX */ 
ssSetOutputPortDataType(S, 247, SS_DOUBLE); 
ssSetOutputPortWidth(S, 247, 1); 
/* ObstacleDataA4.ObstacleType */ 
ssSetOutputPortDataType(S, 248, SS_UINT8); 
ssSetOutputPortWidth(S, 248, 1); 
/* ObstacleDataA4.reserved_1 */ 
ssSetOutputPortDataType(S, 249, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 249, 1); 
/* ObstacleDataA4.ObstacleStatus */ 
ssSetOutputPortDataType(S, 250, SS_UINT8); 
ssSetOutputPortWidth(S, 250, 1); 
/* ObstacleDataA4.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 251, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 251, 1); 
/* ObstacleDataA4.reserved_2 */ 
ssSetOutputPortDataType(S, 252, SS_UINT8); 
ssSetOutputPortWidth(S, 252, 1); 
/* ObstacleDataA4.ObstacleValid */ 
ssSetOutputPortDataType(S, 253, SS_UINT8); 
ssSetOutputPortWidth(S, 253, 1); 
/* ObstacleDataA4 RX_STATUS */ 
ssSetOutputPortDataType(S, 254, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 254, 1); 
/* ObstacleDataA4 time */ 
ssSetOutputPortDataType(S, 255, SS_DOUBLE); 
ssSetOutputPortWidth(S, 255, 1); 
/* ObstacleDataA4 deltatime */ 
ssSetOutputPortDataType(S, 256, SS_DOUBLE); 
ssSetOutputPortWidth(S, 256, 1); 
/* ObstacleDataA5.ObstacleID */ 
ssSetOutputPortDataType(S, 257, SS_UINT8); 
ssSetOutputPortWidth(S, 257, 1); 
/* ObstacleDataA5.ObstaclePosX */ 
ssSetOutputPortDataType(S, 258, SS_DOUBLE); 
ssSetOutputPortWidth(S, 258, 1); 
/* ObstacleDataA5.reserved_4 */ 
ssSetOutputPortDataType(S, 259, SS_UINT8); 
ssSetOutputPortWidth(S, 259, 1); 
/* ObstacleDataA5.ObstaclePosY */ 
ssSetOutputPortDataType(S, 260, SS_DOUBLE); 
ssSetOutputPortWidth(S, 260, 1); 
/* ObstacleDataA5.BlinkerInfo */ 
ssSetOutputPortDataType(S, 261, SS_UINT8); 
ssSetOutputPortWidth(S, 261, 1); 
/* ObstacleDataA5.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 262, SS_UINT8); 
ssSetOutputPortWidth(S, 262, 1); 
/* ObstacleDataA5.ObstacleVelX */ 
ssSetOutputPortDataType(S, 263, SS_DOUBLE); 
ssSetOutputPortWidth(S, 263, 1); 
/* ObstacleDataA5.ObstacleType */ 
ssSetOutputPortDataType(S, 264, SS_UINT8); 
ssSetOutputPortWidth(S, 264, 1); 
/* ObstacleDataA5.reserved_1 */ 
ssSetOutputPortDataType(S, 265, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 265, 1); 
/* ObstacleDataA5.ObstacleStatus */ 
ssSetOutputPortDataType(S, 266, SS_UINT8); 
ssSetOutputPortWidth(S, 266, 1); 
/* ObstacleDataA5.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 267, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 267, 1); 
/* ObstacleDataA5.reserved_2 */ 
ssSetOutputPortDataType(S, 268, SS_UINT8); 
ssSetOutputPortWidth(S, 268, 1); 
/* ObstacleDataA5.ObstacleValid */ 
ssSetOutputPortDataType(S, 269, SS_UINT8); 
ssSetOutputPortWidth(S, 269, 1); 
/* ObstacleDataA5 RX_STATUS */ 
ssSetOutputPortDataType(S, 270, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 270, 1); 
/* ObstacleDataA5 time */ 
ssSetOutputPortDataType(S, 271, SS_DOUBLE); 
ssSetOutputPortWidth(S, 271, 1); 
/* ObstacleDataA5 deltatime */ 
ssSetOutputPortDataType(S, 272, SS_DOUBLE); 
ssSetOutputPortWidth(S, 272, 1); 
/* ObstacleDataA6.ObstacleID */ 
ssSetOutputPortDataType(S, 273, SS_UINT8); 
ssSetOutputPortWidth(S, 273, 1); 
/* ObstacleDataA6.ObstaclePosX */ 
ssSetOutputPortDataType(S, 274, SS_DOUBLE); 
ssSetOutputPortWidth(S, 274, 1); 
/* ObstacleDataA6.reserved_4 */ 
ssSetOutputPortDataType(S, 275, SS_UINT8); 
ssSetOutputPortWidth(S, 275, 1); 
/* ObstacleDataA6.ObstaclePosY */ 
ssSetOutputPortDataType(S, 276, SS_DOUBLE); 
ssSetOutputPortWidth(S, 276, 1); 
/* ObstacleDataA6.BlinkerInfo */ 
ssSetOutputPortDataType(S, 277, SS_UINT8); 
ssSetOutputPortWidth(S, 277, 1); 
/* ObstacleDataA6.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 278, SS_UINT8); 
ssSetOutputPortWidth(S, 278, 1); 
/* ObstacleDataA6.ObstacleVelX */ 
ssSetOutputPortDataType(S, 279, SS_DOUBLE); 
ssSetOutputPortWidth(S, 279, 1); 
/* ObstacleDataA6.ObstacleType */ 
ssSetOutputPortDataType(S, 280, SS_UINT8); 
ssSetOutputPortWidth(S, 280, 1); 
/* ObstacleDataA6.reserved_1 */ 
ssSetOutputPortDataType(S, 281, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 281, 1); 
/* ObstacleDataA6.ObstacleStatus */ 
ssSetOutputPortDataType(S, 282, SS_UINT8); 
ssSetOutputPortWidth(S, 282, 1); 
/* ObstacleDataA6.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 283, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 283, 1); 
/* ObstacleDataA6.reserved_2 */ 
ssSetOutputPortDataType(S, 284, SS_UINT8); 
ssSetOutputPortWidth(S, 284, 1); 
/* ObstacleDataA6.ObstacleValid */ 
ssSetOutputPortDataType(S, 285, SS_UINT8); 
ssSetOutputPortWidth(S, 285, 1); 
/* ObstacleDataA6 RX_STATUS */ 
ssSetOutputPortDataType(S, 286, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 286, 1); 
/* ObstacleDataA6 time */ 
ssSetOutputPortDataType(S, 287, SS_DOUBLE); 
ssSetOutputPortWidth(S, 287, 1); 
/* ObstacleDataA6 deltatime */ 
ssSetOutputPortDataType(S, 288, SS_DOUBLE); 
ssSetOutputPortWidth(S, 288, 1); 
/* ObstacleDataA7.ObstacleID */ 
ssSetOutputPortDataType(S, 289, SS_UINT8); 
ssSetOutputPortWidth(S, 289, 1); 
/* ObstacleDataA7.ObstaclePosX */ 
ssSetOutputPortDataType(S, 290, SS_DOUBLE); 
ssSetOutputPortWidth(S, 290, 1); 
/* ObstacleDataA7.reserved_4 */ 
ssSetOutputPortDataType(S, 291, SS_UINT8); 
ssSetOutputPortWidth(S, 291, 1); 
/* ObstacleDataA7.ObstaclePosY */ 
ssSetOutputPortDataType(S, 292, SS_DOUBLE); 
ssSetOutputPortWidth(S, 292, 1); 
/* ObstacleDataA7.BlinkerInfo */ 
ssSetOutputPortDataType(S, 293, SS_UINT8); 
ssSetOutputPortWidth(S, 293, 1); 
/* ObstacleDataA7.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 294, SS_UINT8); 
ssSetOutputPortWidth(S, 294, 1); 
/* ObstacleDataA7.ObstacleVelX */ 
ssSetOutputPortDataType(S, 295, SS_DOUBLE); 
ssSetOutputPortWidth(S, 295, 1); 
/* ObstacleDataA7.ObstacleType */ 
ssSetOutputPortDataType(S, 296, SS_UINT8); 
ssSetOutputPortWidth(S, 296, 1); 
/* ObstacleDataA7.reserved_1 */ 
ssSetOutputPortDataType(S, 297, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 297, 1); 
/* ObstacleDataA7.ObstacleStatus */ 
ssSetOutputPortDataType(S, 298, SS_UINT8); 
ssSetOutputPortWidth(S, 298, 1); 
/* ObstacleDataA7.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 299, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 299, 1); 
/* ObstacleDataA7.reserved_2 */ 
ssSetOutputPortDataType(S, 300, SS_UINT8); 
ssSetOutputPortWidth(S, 300, 1); 
/* ObstacleDataA7.ObstacleValid */ 
ssSetOutputPortDataType(S, 301, SS_UINT8); 
ssSetOutputPortWidth(S, 301, 1); 
/* ObstacleDataA7 RX_STATUS */ 
ssSetOutputPortDataType(S, 302, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 302, 1); 
/* ObstacleDataA7 time */ 
ssSetOutputPortDataType(S, 303, SS_DOUBLE); 
ssSetOutputPortWidth(S, 303, 1); 
/* ObstacleDataA7 deltatime */ 
ssSetOutputPortDataType(S, 304, SS_DOUBLE); 
ssSetOutputPortWidth(S, 304, 1); 
/* ObstacleDataA8.ObstacleID */ 
ssSetOutputPortDataType(S, 305, SS_UINT8); 
ssSetOutputPortWidth(S, 305, 1); 
/* ObstacleDataA8.ObstaclePosX */ 
ssSetOutputPortDataType(S, 306, SS_DOUBLE); 
ssSetOutputPortWidth(S, 306, 1); 
/* ObstacleDataA8.reserved_4 */ 
ssSetOutputPortDataType(S, 307, SS_UINT8); 
ssSetOutputPortWidth(S, 307, 1); 
/* ObstacleDataA8.ObstaclePosY */ 
ssSetOutputPortDataType(S, 308, SS_DOUBLE); 
ssSetOutputPortWidth(S, 308, 1); 
/* ObstacleDataA8.BlinkerInfo */ 
ssSetOutputPortDataType(S, 309, SS_UINT8); 
ssSetOutputPortWidth(S, 309, 1); 
/* ObstacleDataA8.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 310, SS_UINT8); 
ssSetOutputPortWidth(S, 310, 1); 
/* ObstacleDataA8.ObstacleVelX */ 
ssSetOutputPortDataType(S, 311, SS_DOUBLE); 
ssSetOutputPortWidth(S, 311, 1); 
/* ObstacleDataA8.ObstacleType */ 
ssSetOutputPortDataType(S, 312, SS_UINT8); 
ssSetOutputPortWidth(S, 312, 1); 
/* ObstacleDataA8.reserved_1 */ 
ssSetOutputPortDataType(S, 313, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 313, 1); 
/* ObstacleDataA8.ObstacleStatus */ 
ssSetOutputPortDataType(S, 314, SS_UINT8); 
ssSetOutputPortWidth(S, 314, 1); 
/* ObstacleDataA8.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 315, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 315, 1); 
/* ObstacleDataA8.reserved_2 */ 
ssSetOutputPortDataType(S, 316, SS_UINT8); 
ssSetOutputPortWidth(S, 316, 1); 
/* ObstacleDataA8.ObstacleValid */ 
ssSetOutputPortDataType(S, 317, SS_UINT8); 
ssSetOutputPortWidth(S, 317, 1); 
/* ObstacleDataA8 RX_STATUS */ 
ssSetOutputPortDataType(S, 318, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 318, 1); 
/* ObstacleDataA8 time */ 
ssSetOutputPortDataType(S, 319, SS_DOUBLE); 
ssSetOutputPortWidth(S, 319, 1); 
/* ObstacleDataA8 deltatime */ 
ssSetOutputPortDataType(S, 320, SS_DOUBLE); 
ssSetOutputPortWidth(S, 320, 1); 
/* ObstacleDataA9.ObstacleID */ 
ssSetOutputPortDataType(S, 321, SS_UINT8); 
ssSetOutputPortWidth(S, 321, 1); 
/* ObstacleDataA9.ObstaclePosX */ 
ssSetOutputPortDataType(S, 322, SS_DOUBLE); 
ssSetOutputPortWidth(S, 322, 1); 
/* ObstacleDataA9.reserved_4 */ 
ssSetOutputPortDataType(S, 323, SS_UINT8); 
ssSetOutputPortWidth(S, 323, 1); 
/* ObstacleDataA9.ObstaclePosY */ 
ssSetOutputPortDataType(S, 324, SS_DOUBLE); 
ssSetOutputPortWidth(S, 324, 1); 
/* ObstacleDataA9.BlinkerInfo */ 
ssSetOutputPortDataType(S, 325, SS_UINT8); 
ssSetOutputPortWidth(S, 325, 1); 
/* ObstacleDataA9.Move_in_and_Out */ 
ssSetOutputPortDataType(S, 326, SS_UINT8); 
ssSetOutputPortWidth(S, 326, 1); 
/* ObstacleDataA9.ObstacleVelX */ 
ssSetOutputPortDataType(S, 327, SS_DOUBLE); 
ssSetOutputPortWidth(S, 327, 1); 
/* ObstacleDataA9.ObstacleType */ 
ssSetOutputPortDataType(S, 328, SS_UINT8); 
ssSetOutputPortWidth(S, 328, 1); 
/* ObstacleDataA9.reserved_1 */ 
ssSetOutputPortDataType(S, 329, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 329, 1); 
/* ObstacleDataA9.ObstacleStatus */ 
ssSetOutputPortDataType(S, 330, SS_UINT8); 
ssSetOutputPortWidth(S, 330, 1); 
/* ObstacleDataA9.ObstacleBrakeLights */ 
ssSetOutputPortDataType(S, 331, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 331, 1); 
/* ObstacleDataA9.reserved_2 */ 
ssSetOutputPortDataType(S, 332, SS_UINT8); 
ssSetOutputPortWidth(S, 332, 1); 
/* ObstacleDataA9.ObstacleValid */ 
ssSetOutputPortDataType(S, 333, SS_UINT8); 
ssSetOutputPortWidth(S, 333, 1); 
/* ObstacleDataA9 RX_STATUS */ 
ssSetOutputPortDataType(S, 334, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 334, 1); 
/* ObstacleDataA9 time */ 
ssSetOutputPortDataType(S, 335, SS_DOUBLE); 
ssSetOutputPortWidth(S, 335, 1); 
/* ObstacleDataA9 deltatime */ 
ssSetOutputPortDataType(S, 336, SS_DOUBLE); 
ssSetOutputPortWidth(S, 336, 1); 
/* ObstacleDataB1.ObstacleLength */ 
ssSetOutputPortDataType(S, 337, SS_DOUBLE); 
ssSetOutputPortWidth(S, 337, 1); 
/* ObstacleDataB1.ObstacleWidth */ 
ssSetOutputPortDataType(S, 338, SS_DOUBLE); 
ssSetOutputPortWidth(S, 338, 1); 
/* ObstacleDataB1.ObstacleAge */ 
ssSetOutputPortDataType(S, 339, SS_UINT8); 
ssSetOutputPortWidth(S, 339, 1); 
/* ObstacleDataB1.ObstacleLane */ 
ssSetOutputPortDataType(S, 340, SS_UINT8); 
ssSetOutputPortWidth(S, 340, 1); 
/* ObstacleDataB1.CIPVFlag */ 
ssSetOutputPortDataType(S, 341, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 341, 1); 
/* ObstacleDataB1.reserved_1 */ 
ssSetOutputPortDataType(S, 342, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 342, 1); 
/* ObstacleDataB1.RadarPosX */ 
ssSetOutputPortDataType(S, 343, SS_DOUBLE); 
ssSetOutputPortWidth(S, 343, 1); 
/* ObstacleDataB1.RadarVelX */ 
ssSetOutputPortDataType(S, 344, SS_DOUBLE); 
ssSetOutputPortWidth(S, 344, 1); 
/* ObstacleDataB1.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 345, SS_UINT8); 
ssSetOutputPortWidth(S, 345, 1); 
/* ObstacleDataB1.reserved_1_b */ 
ssSetOutputPortDataType(S, 346, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 346, 1); 
/* ObstacleDataB1.MatchedRadarID */ 
ssSetOutputPortDataType(S, 347, SS_UINT8); 
ssSetOutputPortWidth(S, 347, 1); 
/* ObstacleDataB1.reserved_1_c */ 
ssSetOutputPortDataType(S, 348, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 348, 1); 
/* ObstacleDataB1 RX_STATUS */ 
ssSetOutputPortDataType(S, 349, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 349, 1); 
/* ObstacleDataB1 time */ 
ssSetOutputPortDataType(S, 350, SS_DOUBLE); 
ssSetOutputPortWidth(S, 350, 1); 
/* ObstacleDataB1 deltatime */ 
ssSetOutputPortDataType(S, 351, SS_DOUBLE); 
ssSetOutputPortWidth(S, 351, 1); 
/* ObstacleDataB10.ObstacleLength */ 
ssSetOutputPortDataType(S, 352, SS_DOUBLE); 
ssSetOutputPortWidth(S, 352, 1); 
/* ObstacleDataB10.ObstacleWidth */ 
ssSetOutputPortDataType(S, 353, SS_DOUBLE); 
ssSetOutputPortWidth(S, 353, 1); 
/* ObstacleDataB10.ObstacleAge */ 
ssSetOutputPortDataType(S, 354, SS_UINT8); 
ssSetOutputPortWidth(S, 354, 1); 
/* ObstacleDataB10.ObstacleLane */ 
ssSetOutputPortDataType(S, 355, SS_UINT8); 
ssSetOutputPortWidth(S, 355, 1); 
/* ObstacleDataB10.CIPVFlag */ 
ssSetOutputPortDataType(S, 356, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 356, 1); 
/* ObstacleDataB10.reserved_1 */ 
ssSetOutputPortDataType(S, 357, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 357, 1); 
/* ObstacleDataB10.RadarPosX */ 
ssSetOutputPortDataType(S, 358, SS_DOUBLE); 
ssSetOutputPortWidth(S, 358, 1); 
/* ObstacleDataB10.RadarVelX */ 
ssSetOutputPortDataType(S, 359, SS_DOUBLE); 
ssSetOutputPortWidth(S, 359, 1); 
/* ObstacleDataB10.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 360, SS_UINT8); 
ssSetOutputPortWidth(S, 360, 1); 
/* ObstacleDataB10.reserved_1_b */ 
ssSetOutputPortDataType(S, 361, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 361, 1); 
/* ObstacleDataB10.MatchedRadarID */ 
ssSetOutputPortDataType(S, 362, SS_UINT8); 
ssSetOutputPortWidth(S, 362, 1); 
/* ObstacleDataB10.reserved_1_c */ 
ssSetOutputPortDataType(S, 363, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 363, 1); 
/* ObstacleDataB10 RX_STATUS */ 
ssSetOutputPortDataType(S, 364, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 364, 1); 
/* ObstacleDataB10 time */ 
ssSetOutputPortDataType(S, 365, SS_DOUBLE); 
ssSetOutputPortWidth(S, 365, 1); 
/* ObstacleDataB10 deltatime */ 
ssSetOutputPortDataType(S, 366, SS_DOUBLE); 
ssSetOutputPortWidth(S, 366, 1); 
/* ObstacleDataB2.ObstacleLength */ 
ssSetOutputPortDataType(S, 367, SS_DOUBLE); 
ssSetOutputPortWidth(S, 367, 1); 
/* ObstacleDataB2.ObstacleWidth */ 
ssSetOutputPortDataType(S, 368, SS_DOUBLE); 
ssSetOutputPortWidth(S, 368, 1); 
/* ObstacleDataB2.ObstacleAge */ 
ssSetOutputPortDataType(S, 369, SS_UINT8); 
ssSetOutputPortWidth(S, 369, 1); 
/* ObstacleDataB2.ObstacleLane */ 
ssSetOutputPortDataType(S, 370, SS_UINT8); 
ssSetOutputPortWidth(S, 370, 1); 
/* ObstacleDataB2.CIPVFlag */ 
ssSetOutputPortDataType(S, 371, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 371, 1); 
/* ObstacleDataB2.reserved_1 */ 
ssSetOutputPortDataType(S, 372, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 372, 1); 
/* ObstacleDataB2.RadarPosX */ 
ssSetOutputPortDataType(S, 373, SS_DOUBLE); 
ssSetOutputPortWidth(S, 373, 1); 
/* ObstacleDataB2.RadarVelX */ 
ssSetOutputPortDataType(S, 374, SS_DOUBLE); 
ssSetOutputPortWidth(S, 374, 1); 
/* ObstacleDataB2.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 375, SS_UINT8); 
ssSetOutputPortWidth(S, 375, 1); 
/* ObstacleDataB2.reserved_1_b */ 
ssSetOutputPortDataType(S, 376, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 376, 1); 
/* ObstacleDataB2.MatchedRadarID */ 
ssSetOutputPortDataType(S, 377, SS_UINT8); 
ssSetOutputPortWidth(S, 377, 1); 
/* ObstacleDataB2.reserved_1_c */ 
ssSetOutputPortDataType(S, 378, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 378, 1); 
/* ObstacleDataB2 RX_STATUS */ 
ssSetOutputPortDataType(S, 379, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 379, 1); 
/* ObstacleDataB2 time */ 
ssSetOutputPortDataType(S, 380, SS_DOUBLE); 
ssSetOutputPortWidth(S, 380, 1); 
/* ObstacleDataB2 deltatime */ 
ssSetOutputPortDataType(S, 381, SS_DOUBLE); 
ssSetOutputPortWidth(S, 381, 1); 
/* ObstacleDataB3.ObstacleLength */ 
ssSetOutputPortDataType(S, 382, SS_DOUBLE); 
ssSetOutputPortWidth(S, 382, 1); 
/* ObstacleDataB3.ObstacleWidth */ 
ssSetOutputPortDataType(S, 383, SS_DOUBLE); 
ssSetOutputPortWidth(S, 383, 1); 
/* ObstacleDataB3.ObstacleAge */ 
ssSetOutputPortDataType(S, 384, SS_UINT8); 
ssSetOutputPortWidth(S, 384, 1); 
/* ObstacleDataB3.ObstacleLane */ 
ssSetOutputPortDataType(S, 385, SS_UINT8); 
ssSetOutputPortWidth(S, 385, 1); 
/* ObstacleDataB3.CIPVFlag */ 
ssSetOutputPortDataType(S, 386, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 386, 1); 
/* ObstacleDataB3.reserved_1 */ 
ssSetOutputPortDataType(S, 387, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 387, 1); 
/* ObstacleDataB3.RadarPosX */ 
ssSetOutputPortDataType(S, 388, SS_DOUBLE); 
ssSetOutputPortWidth(S, 388, 1); 
/* ObstacleDataB3.RadarVelX */ 
ssSetOutputPortDataType(S, 389, SS_DOUBLE); 
ssSetOutputPortWidth(S, 389, 1); 
/* ObstacleDataB3.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 390, SS_UINT8); 
ssSetOutputPortWidth(S, 390, 1); 
/* ObstacleDataB3.reserved_1_b */ 
ssSetOutputPortDataType(S, 391, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 391, 1); 
/* ObstacleDataB3.MatchedRadarID */ 
ssSetOutputPortDataType(S, 392, SS_UINT8); 
ssSetOutputPortWidth(S, 392, 1); 
/* ObstacleDataB3.reserved_1_c */ 
ssSetOutputPortDataType(S, 393, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 393, 1); 
/* ObstacleDataB3 RX_STATUS */ 
ssSetOutputPortDataType(S, 394, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 394, 1); 
/* ObstacleDataB3 time */ 
ssSetOutputPortDataType(S, 395, SS_DOUBLE); 
ssSetOutputPortWidth(S, 395, 1); 
/* ObstacleDataB3 deltatime */ 
ssSetOutputPortDataType(S, 396, SS_DOUBLE); 
ssSetOutputPortWidth(S, 396, 1); 
/* ObstacleDataB4.ObstacleLength */ 
ssSetOutputPortDataType(S, 397, SS_DOUBLE); 
ssSetOutputPortWidth(S, 397, 1); 
/* ObstacleDataB4.ObstacleWidth */ 
ssSetOutputPortDataType(S, 398, SS_DOUBLE); 
ssSetOutputPortWidth(S, 398, 1); 
/* ObstacleDataB4.ObstacleAge */ 
ssSetOutputPortDataType(S, 399, SS_UINT8); 
ssSetOutputPortWidth(S, 399, 1); 
/* ObstacleDataB4.ObstacleLane */ 
ssSetOutputPortDataType(S, 400, SS_UINT8); 
ssSetOutputPortWidth(S, 400, 1); 
/* ObstacleDataB4.CIPVFlag */ 
ssSetOutputPortDataType(S, 401, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 401, 1); 
/* ObstacleDataB4.reserved_1 */ 
ssSetOutputPortDataType(S, 402, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 402, 1); 
/* ObstacleDataB4.RadarPosX */ 
ssSetOutputPortDataType(S, 403, SS_DOUBLE); 
ssSetOutputPortWidth(S, 403, 1); 
/* ObstacleDataB4.RadarVelX */ 
ssSetOutputPortDataType(S, 404, SS_DOUBLE); 
ssSetOutputPortWidth(S, 404, 1); 
/* ObstacleDataB4.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 405, SS_UINT8); 
ssSetOutputPortWidth(S, 405, 1); 
/* ObstacleDataB4.reserved_1_b */ 
ssSetOutputPortDataType(S, 406, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 406, 1); 
/* ObstacleDataB4.MatchedRadarID */ 
ssSetOutputPortDataType(S, 407, SS_UINT8); 
ssSetOutputPortWidth(S, 407, 1); 
/* ObstacleDataB4.reserved_1_c */ 
ssSetOutputPortDataType(S, 408, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 408, 1); 
/* ObstacleDataB4 RX_STATUS */ 
ssSetOutputPortDataType(S, 409, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 409, 1); 
/* ObstacleDataB4 time */ 
ssSetOutputPortDataType(S, 410, SS_DOUBLE); 
ssSetOutputPortWidth(S, 410, 1); 
/* ObstacleDataB4 deltatime */ 
ssSetOutputPortDataType(S, 411, SS_DOUBLE); 
ssSetOutputPortWidth(S, 411, 1); 
/* ObstacleDataB5.ObstacleLength */ 
ssSetOutputPortDataType(S, 412, SS_DOUBLE); 
ssSetOutputPortWidth(S, 412, 1); 
/* ObstacleDataB5.ObstacleWidth */ 
ssSetOutputPortDataType(S, 413, SS_DOUBLE); 
ssSetOutputPortWidth(S, 413, 1); 
/* ObstacleDataB5.ObstacleAge */ 
ssSetOutputPortDataType(S, 414, SS_UINT8); 
ssSetOutputPortWidth(S, 414, 1); 
/* ObstacleDataB5.ObstacleLane */ 
ssSetOutputPortDataType(S, 415, SS_UINT8); 
ssSetOutputPortWidth(S, 415, 1); 
/* ObstacleDataB5.CIPVFlag */ 
ssSetOutputPortDataType(S, 416, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 416, 1); 
/* ObstacleDataB5.reserved_1 */ 
ssSetOutputPortDataType(S, 417, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 417, 1); 
/* ObstacleDataB5.RadarPosX */ 
ssSetOutputPortDataType(S, 418, SS_DOUBLE); 
ssSetOutputPortWidth(S, 418, 1); 
/* ObstacleDataB5.RadarVelX */ 
ssSetOutputPortDataType(S, 419, SS_DOUBLE); 
ssSetOutputPortWidth(S, 419, 1); 
/* ObstacleDataB5.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 420, SS_UINT8); 
ssSetOutputPortWidth(S, 420, 1); 
/* ObstacleDataB5.reserved_1_b */ 
ssSetOutputPortDataType(S, 421, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 421, 1); 
/* ObstacleDataB5.MatchedRadarID */ 
ssSetOutputPortDataType(S, 422, SS_UINT8); 
ssSetOutputPortWidth(S, 422, 1); 
/* ObstacleDataB5.reserved_1_c */ 
ssSetOutputPortDataType(S, 423, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 423, 1); 
/* ObstacleDataB5 RX_STATUS */ 
ssSetOutputPortDataType(S, 424, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 424, 1); 
/* ObstacleDataB5 time */ 
ssSetOutputPortDataType(S, 425, SS_DOUBLE); 
ssSetOutputPortWidth(S, 425, 1); 
/* ObstacleDataB5 deltatime */ 
ssSetOutputPortDataType(S, 426, SS_DOUBLE); 
ssSetOutputPortWidth(S, 426, 1); 
/* ObstacleDataB6.ObstacleLength */ 
ssSetOutputPortDataType(S, 427, SS_DOUBLE); 
ssSetOutputPortWidth(S, 427, 1); 
/* ObstacleDataB6.ObstacleWidth */ 
ssSetOutputPortDataType(S, 428, SS_DOUBLE); 
ssSetOutputPortWidth(S, 428, 1); 
/* ObstacleDataB6.ObstacleAge */ 
ssSetOutputPortDataType(S, 429, SS_UINT8); 
ssSetOutputPortWidth(S, 429, 1); 
/* ObstacleDataB6.ObstacleLane */ 
ssSetOutputPortDataType(S, 430, SS_UINT8); 
ssSetOutputPortWidth(S, 430, 1); 
/* ObstacleDataB6.CIPVFlag */ 
ssSetOutputPortDataType(S, 431, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 431, 1); 
/* ObstacleDataB6.reserved_1 */ 
ssSetOutputPortDataType(S, 432, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 432, 1); 
/* ObstacleDataB6.RadarPosX */ 
ssSetOutputPortDataType(S, 433, SS_DOUBLE); 
ssSetOutputPortWidth(S, 433, 1); 
/* ObstacleDataB6.RadarVelX */ 
ssSetOutputPortDataType(S, 434, SS_DOUBLE); 
ssSetOutputPortWidth(S, 434, 1); 
/* ObstacleDataB6.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 435, SS_UINT8); 
ssSetOutputPortWidth(S, 435, 1); 
/* ObstacleDataB6.reserved_1_b */ 
ssSetOutputPortDataType(S, 436, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 436, 1); 
/* ObstacleDataB6.MatchedRadarID */ 
ssSetOutputPortDataType(S, 437, SS_UINT8); 
ssSetOutputPortWidth(S, 437, 1); 
/* ObstacleDataB6.reserved_1_c */ 
ssSetOutputPortDataType(S, 438, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 438, 1); 
/* ObstacleDataB6 RX_STATUS */ 
ssSetOutputPortDataType(S, 439, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 439, 1); 
/* ObstacleDataB6 time */ 
ssSetOutputPortDataType(S, 440, SS_DOUBLE); 
ssSetOutputPortWidth(S, 440, 1); 
/* ObstacleDataB6 deltatime */ 
ssSetOutputPortDataType(S, 441, SS_DOUBLE); 
ssSetOutputPortWidth(S, 441, 1); 
/* ObstacleDataB7.ObstacleLength */ 
ssSetOutputPortDataType(S, 442, SS_DOUBLE); 
ssSetOutputPortWidth(S, 442, 1); 
/* ObstacleDataB7.ObstacleWidth */ 
ssSetOutputPortDataType(S, 443, SS_DOUBLE); 
ssSetOutputPortWidth(S, 443, 1); 
/* ObstacleDataB7.ObstacleAge */ 
ssSetOutputPortDataType(S, 444, SS_UINT8); 
ssSetOutputPortWidth(S, 444, 1); 
/* ObstacleDataB7.ObstacleLane */ 
ssSetOutputPortDataType(S, 445, SS_UINT8); 
ssSetOutputPortWidth(S, 445, 1); 
/* ObstacleDataB7.CIPVFlag */ 
ssSetOutputPortDataType(S, 446, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 446, 1); 
/* ObstacleDataB7.reserved_1 */ 
ssSetOutputPortDataType(S, 447, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 447, 1); 
/* ObstacleDataB7.RadarPosX */ 
ssSetOutputPortDataType(S, 448, SS_DOUBLE); 
ssSetOutputPortWidth(S, 448, 1); 
/* ObstacleDataB7.RadarVelX */ 
ssSetOutputPortDataType(S, 449, SS_DOUBLE); 
ssSetOutputPortWidth(S, 449, 1); 
/* ObstacleDataB7.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 450, SS_UINT8); 
ssSetOutputPortWidth(S, 450, 1); 
/* ObstacleDataB7.reserved_1_b */ 
ssSetOutputPortDataType(S, 451, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 451, 1); 
/* ObstacleDataB7.MatchedRadarID */ 
ssSetOutputPortDataType(S, 452, SS_UINT8); 
ssSetOutputPortWidth(S, 452, 1); 
/* ObstacleDataB7.reserved_1_c */ 
ssSetOutputPortDataType(S, 453, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 453, 1); 
/* ObstacleDataB7 RX_STATUS */ 
ssSetOutputPortDataType(S, 454, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 454, 1); 
/* ObstacleDataB7 time */ 
ssSetOutputPortDataType(S, 455, SS_DOUBLE); 
ssSetOutputPortWidth(S, 455, 1); 
/* ObstacleDataB7 deltatime */ 
ssSetOutputPortDataType(S, 456, SS_DOUBLE); 
ssSetOutputPortWidth(S, 456, 1); 
/* ObstacleDataB8.ObstacleLength */ 
ssSetOutputPortDataType(S, 457, SS_DOUBLE); 
ssSetOutputPortWidth(S, 457, 1); 
/* ObstacleDataB8.ObstacleWidth */ 
ssSetOutputPortDataType(S, 458, SS_DOUBLE); 
ssSetOutputPortWidth(S, 458, 1); 
/* ObstacleDataB8.ObstacleAge */ 
ssSetOutputPortDataType(S, 459, SS_UINT8); 
ssSetOutputPortWidth(S, 459, 1); 
/* ObstacleDataB8.ObstacleLane */ 
ssSetOutputPortDataType(S, 460, SS_UINT8); 
ssSetOutputPortWidth(S, 460, 1); 
/* ObstacleDataB8.CIPVFlag */ 
ssSetOutputPortDataType(S, 461, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 461, 1); 
/* ObstacleDataB8.reserved_1 */ 
ssSetOutputPortDataType(S, 462, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 462, 1); 
/* ObstacleDataB8.RadarPosX */ 
ssSetOutputPortDataType(S, 463, SS_DOUBLE); 
ssSetOutputPortWidth(S, 463, 1); 
/* ObstacleDataB8.RadarVelX */ 
ssSetOutputPortDataType(S, 464, SS_DOUBLE); 
ssSetOutputPortWidth(S, 464, 1); 
/* ObstacleDataB8.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 465, SS_UINT8); 
ssSetOutputPortWidth(S, 465, 1); 
/* ObstacleDataB8.reserved_1_b */ 
ssSetOutputPortDataType(S, 466, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 466, 1); 
/* ObstacleDataB8.MatchedRadarID */ 
ssSetOutputPortDataType(S, 467, SS_UINT8); 
ssSetOutputPortWidth(S, 467, 1); 
/* ObstacleDataB8.reserved_1_c */ 
ssSetOutputPortDataType(S, 468, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 468, 1); 
/* ObstacleDataB8 RX_STATUS */ 
ssSetOutputPortDataType(S, 469, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 469, 1); 
/* ObstacleDataB8 time */ 
ssSetOutputPortDataType(S, 470, SS_DOUBLE); 
ssSetOutputPortWidth(S, 470, 1); 
/* ObstacleDataB8 deltatime */ 
ssSetOutputPortDataType(S, 471, SS_DOUBLE); 
ssSetOutputPortWidth(S, 471, 1); 
/* ObstacleDataB9.ObstacleLength */ 
ssSetOutputPortDataType(S, 472, SS_DOUBLE); 
ssSetOutputPortWidth(S, 472, 1); 
/* ObstacleDataB9.ObstacleWidth */ 
ssSetOutputPortDataType(S, 473, SS_DOUBLE); 
ssSetOutputPortWidth(S, 473, 1); 
/* ObstacleDataB9.ObstacleAge */ 
ssSetOutputPortDataType(S, 474, SS_UINT8); 
ssSetOutputPortWidth(S, 474, 1); 
/* ObstacleDataB9.ObstacleLane */ 
ssSetOutputPortDataType(S, 475, SS_UINT8); 
ssSetOutputPortWidth(S, 475, 1); 
/* ObstacleDataB9.CIPVFlag */ 
ssSetOutputPortDataType(S, 476, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 476, 1); 
/* ObstacleDataB9.reserved_1 */ 
ssSetOutputPortDataType(S, 477, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 477, 1); 
/* ObstacleDataB9.RadarPosX */ 
ssSetOutputPortDataType(S, 478, SS_DOUBLE); 
ssSetOutputPortWidth(S, 478, 1); 
/* ObstacleDataB9.RadarVelX */ 
ssSetOutputPortDataType(S, 479, SS_DOUBLE); 
ssSetOutputPortWidth(S, 479, 1); 
/* ObstacleDataB9.RadarMatchConfidence */ 
ssSetOutputPortDataType(S, 480, SS_UINT8); 
ssSetOutputPortWidth(S, 480, 1); 
/* ObstacleDataB9.reserved_1_b */ 
ssSetOutputPortDataType(S, 481, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 481, 1); 
/* ObstacleDataB9.MatchedRadarID */ 
ssSetOutputPortDataType(S, 482, SS_UINT8); 
ssSetOutputPortWidth(S, 482, 1); 
/* ObstacleDataB9.reserved_1_c */ 
ssSetOutputPortDataType(S, 483, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 483, 1); 
/* ObstacleDataB9 RX_STATUS */ 
ssSetOutputPortDataType(S, 484, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 484, 1); 
/* ObstacleDataB9 time */ 
ssSetOutputPortDataType(S, 485, SS_DOUBLE); 
ssSetOutputPortWidth(S, 485, 1); 
/* ObstacleDataB9 deltatime */ 
ssSetOutputPortDataType(S, 486, SS_DOUBLE); 
ssSetOutputPortWidth(S, 486, 1); 
/* ObstacleDataC1.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 487, SS_DOUBLE); 
ssSetOutputPortWidth(S, 487, 1); 
/* ObstacleDataC1.ObstacleVelY */ 
ssSetOutputPortDataType(S, 488, SS_DOUBLE); 
ssSetOutputPortWidth(S, 488, 1); 
/* ObstacleDataC1.reserved_5 */ 
ssSetOutputPortDataType(S, 489, SS_UINT8); 
ssSetOutputPortWidth(S, 489, 1); 
/* ObstacleDataC1.Object_Accel_X */ 
ssSetOutputPortDataType(S, 490, SS_DOUBLE); 
ssSetOutputPortWidth(S, 490, 1); 
/* ObstacleDataC1.reserved_2 */ 
ssSetOutputPortDataType(S, 491, SS_UINT8); 
ssSetOutputPortWidth(S, 491, 1); 
/* ObstacleDataC1.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 492, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 492, 1); 
/* ObstacleDataC1.reserved_3 */ 
ssSetOutputPortDataType(S, 493, SS_UINT8); 
ssSetOutputPortWidth(S, 493, 1); 
/* ObstacleDataC1.ObstacleAngle */ 
ssSetOutputPortDataType(S, 494, SS_DOUBLE); 
ssSetOutputPortWidth(S, 494, 1); 
/* ObstacleDataC1 RX_STATUS */ 
ssSetOutputPortDataType(S, 495, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 495, 1); 
/* ObstacleDataC1 time */ 
ssSetOutputPortDataType(S, 496, SS_DOUBLE); 
ssSetOutputPortWidth(S, 496, 1); 
/* ObstacleDataC1 deltatime */ 
ssSetOutputPortDataType(S, 497, SS_DOUBLE); 
ssSetOutputPortWidth(S, 497, 1); 
/* ObstacleDataC10.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 498, SS_DOUBLE); 
ssSetOutputPortWidth(S, 498, 1); 
/* ObstacleDataC10.ObstacleVelY */ 
ssSetOutputPortDataType(S, 499, SS_DOUBLE); 
ssSetOutputPortWidth(S, 499, 1); 
/* ObstacleDataC10.reserved_5 */ 
ssSetOutputPortDataType(S, 500, SS_UINT8); 
ssSetOutputPortWidth(S, 500, 1); 
/* ObstacleDataC10.Object_Accel_X */ 
ssSetOutputPortDataType(S, 501, SS_DOUBLE); 
ssSetOutputPortWidth(S, 501, 1); 
/* ObstacleDataC10.reserved_2 */ 
ssSetOutputPortDataType(S, 502, SS_UINT8); 
ssSetOutputPortWidth(S, 502, 1); 
/* ObstacleDataC10.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 503, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 503, 1); 
/* ObstacleDataC10.reserved_3 */ 
ssSetOutputPortDataType(S, 504, SS_UINT8); 
ssSetOutputPortWidth(S, 504, 1); 
/* ObstacleDataC10.ObstacleAngle */ 
ssSetOutputPortDataType(S, 505, SS_DOUBLE); 
ssSetOutputPortWidth(S, 505, 1); 
/* ObstacleDataC10 RX_STATUS */ 
ssSetOutputPortDataType(S, 506, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 506, 1); 
/* ObstacleDataC10 time */ 
ssSetOutputPortDataType(S, 507, SS_DOUBLE); 
ssSetOutputPortWidth(S, 507, 1); 
/* ObstacleDataC10 deltatime */ 
ssSetOutputPortDataType(S, 508, SS_DOUBLE); 
ssSetOutputPortWidth(S, 508, 1); 
/* ObstacleDataC2.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 509, SS_DOUBLE); 
ssSetOutputPortWidth(S, 509, 1); 
/* ObstacleDataC2.ObstacleVelY */ 
ssSetOutputPortDataType(S, 510, SS_DOUBLE); 
ssSetOutputPortWidth(S, 510, 1); 
/* ObstacleDataC2.reserved_5 */ 
ssSetOutputPortDataType(S, 511, SS_UINT8); 
ssSetOutputPortWidth(S, 511, 1); 
/* ObstacleDataC2.Object_Accel_X */ 
ssSetOutputPortDataType(S, 512, SS_DOUBLE); 
ssSetOutputPortWidth(S, 512, 1); 
/* ObstacleDataC2.reserved_2 */ 
ssSetOutputPortDataType(S, 513, SS_UINT8); 
ssSetOutputPortWidth(S, 513, 1); 
/* ObstacleDataC2.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 514, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 514, 1); 
/* ObstacleDataC2.reserved_3 */ 
ssSetOutputPortDataType(S, 515, SS_UINT8); 
ssSetOutputPortWidth(S, 515, 1); 
/* ObstacleDataC2.ObstacleAngle */ 
ssSetOutputPortDataType(S, 516, SS_DOUBLE); 
ssSetOutputPortWidth(S, 516, 1); 
/* ObstacleDataC2 RX_STATUS */ 
ssSetOutputPortDataType(S, 517, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 517, 1); 
/* ObstacleDataC2 time */ 
ssSetOutputPortDataType(S, 518, SS_DOUBLE); 
ssSetOutputPortWidth(S, 518, 1); 
/* ObstacleDataC2 deltatime */ 
ssSetOutputPortDataType(S, 519, SS_DOUBLE); 
ssSetOutputPortWidth(S, 519, 1); 
/* ObstacleDataC3.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 520, SS_DOUBLE); 
ssSetOutputPortWidth(S, 520, 1); 
/* ObstacleDataC3.ObstacleVelY */ 
ssSetOutputPortDataType(S, 521, SS_DOUBLE); 
ssSetOutputPortWidth(S, 521, 1); 
/* ObstacleDataC3.reserved_5 */ 
ssSetOutputPortDataType(S, 522, SS_UINT8); 
ssSetOutputPortWidth(S, 522, 1); 
/* ObstacleDataC3.Object_Accel_X */ 
ssSetOutputPortDataType(S, 523, SS_DOUBLE); 
ssSetOutputPortWidth(S, 523, 1); 
/* ObstacleDataC3.reserved_2 */ 
ssSetOutputPortDataType(S, 524, SS_UINT8); 
ssSetOutputPortWidth(S, 524, 1); 
/* ObstacleDataC3.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 525, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 525, 1); 
/* ObstacleDataC3.reserved_3 */ 
ssSetOutputPortDataType(S, 526, SS_UINT8); 
ssSetOutputPortWidth(S, 526, 1); 
/* ObstacleDataC3.ObstacleAngle */ 
ssSetOutputPortDataType(S, 527, SS_DOUBLE); 
ssSetOutputPortWidth(S, 527, 1); 
/* ObstacleDataC3 RX_STATUS */ 
ssSetOutputPortDataType(S, 528, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 528, 1); 
/* ObstacleDataC3 time */ 
ssSetOutputPortDataType(S, 529, SS_DOUBLE); 
ssSetOutputPortWidth(S, 529, 1); 
/* ObstacleDataC3 deltatime */ 
ssSetOutputPortDataType(S, 530, SS_DOUBLE); 
ssSetOutputPortWidth(S, 530, 1); 
/* ObstacleDataC4.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 531, SS_DOUBLE); 
ssSetOutputPortWidth(S, 531, 1); 
/* ObstacleDataC4.ObstacleVelY */ 
ssSetOutputPortDataType(S, 532, SS_DOUBLE); 
ssSetOutputPortWidth(S, 532, 1); 
/* ObstacleDataC4.reserved_5 */ 
ssSetOutputPortDataType(S, 533, SS_UINT8); 
ssSetOutputPortWidth(S, 533, 1); 
/* ObstacleDataC4.Object_Accel_X */ 
ssSetOutputPortDataType(S, 534, SS_DOUBLE); 
ssSetOutputPortWidth(S, 534, 1); 
/* ObstacleDataC4.reserved_2 */ 
ssSetOutputPortDataType(S, 535, SS_UINT8); 
ssSetOutputPortWidth(S, 535, 1); 
/* ObstacleDataC4.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 536, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 536, 1); 
/* ObstacleDataC4.reserved_3 */ 
ssSetOutputPortDataType(S, 537, SS_UINT8); 
ssSetOutputPortWidth(S, 537, 1); 
/* ObstacleDataC4.ObstacleAngle */ 
ssSetOutputPortDataType(S, 538, SS_DOUBLE); 
ssSetOutputPortWidth(S, 538, 1); 
/* ObstacleDataC4 RX_STATUS */ 
ssSetOutputPortDataType(S, 539, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 539, 1); 
/* ObstacleDataC4 time */ 
ssSetOutputPortDataType(S, 540, SS_DOUBLE); 
ssSetOutputPortWidth(S, 540, 1); 
/* ObstacleDataC4 deltatime */ 
ssSetOutputPortDataType(S, 541, SS_DOUBLE); 
ssSetOutputPortWidth(S, 541, 1); 
/* ObstacleDataC5.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 542, SS_DOUBLE); 
ssSetOutputPortWidth(S, 542, 1); 
/* ObstacleDataC5.ObstacleVelY */ 
ssSetOutputPortDataType(S, 543, SS_DOUBLE); 
ssSetOutputPortWidth(S, 543, 1); 
/* ObstacleDataC5.reserved_5 */ 
ssSetOutputPortDataType(S, 544, SS_UINT8); 
ssSetOutputPortWidth(S, 544, 1); 
/* ObstacleDataC5.Object_Accel_X */ 
ssSetOutputPortDataType(S, 545, SS_DOUBLE); 
ssSetOutputPortWidth(S, 545, 1); 
/* ObstacleDataC5.reserved_2 */ 
ssSetOutputPortDataType(S, 546, SS_UINT8); 
ssSetOutputPortWidth(S, 546, 1); 
/* ObstacleDataC5.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 547, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 547, 1); 
/* ObstacleDataC5.reserved_3 */ 
ssSetOutputPortDataType(S, 548, SS_UINT8); 
ssSetOutputPortWidth(S, 548, 1); 
/* ObstacleDataC5.ObstacleAngle */ 
ssSetOutputPortDataType(S, 549, SS_DOUBLE); 
ssSetOutputPortWidth(S, 549, 1); 
/* ObstacleDataC5 RX_STATUS */ 
ssSetOutputPortDataType(S, 550, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 550, 1); 
/* ObstacleDataC5 time */ 
ssSetOutputPortDataType(S, 551, SS_DOUBLE); 
ssSetOutputPortWidth(S, 551, 1); 
/* ObstacleDataC5 deltatime */ 
ssSetOutputPortDataType(S, 552, SS_DOUBLE); 
ssSetOutputPortWidth(S, 552, 1); 
/* ObstacleDataC6.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 553, SS_DOUBLE); 
ssSetOutputPortWidth(S, 553, 1); 
/* ObstacleDataC6.ObstacleVelY */ 
ssSetOutputPortDataType(S, 554, SS_DOUBLE); 
ssSetOutputPortWidth(S, 554, 1); 
/* ObstacleDataC6.reserved_5 */ 
ssSetOutputPortDataType(S, 555, SS_UINT8); 
ssSetOutputPortWidth(S, 555, 1); 
/* ObstacleDataC6.Object_Accel_X */ 
ssSetOutputPortDataType(S, 556, SS_DOUBLE); 
ssSetOutputPortWidth(S, 556, 1); 
/* ObstacleDataC6.reserved_2 */ 
ssSetOutputPortDataType(S, 557, SS_UINT8); 
ssSetOutputPortWidth(S, 557, 1); 
/* ObstacleDataC6.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 558, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 558, 1); 
/* ObstacleDataC6.reserved_3 */ 
ssSetOutputPortDataType(S, 559, SS_UINT8); 
ssSetOutputPortWidth(S, 559, 1); 
/* ObstacleDataC6.ObstacleAngle */ 
ssSetOutputPortDataType(S, 560, SS_DOUBLE); 
ssSetOutputPortWidth(S, 560, 1); 
/* ObstacleDataC6 RX_STATUS */ 
ssSetOutputPortDataType(S, 561, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 561, 1); 
/* ObstacleDataC6 time */ 
ssSetOutputPortDataType(S, 562, SS_DOUBLE); 
ssSetOutputPortWidth(S, 562, 1); 
/* ObstacleDataC6 deltatime */ 
ssSetOutputPortDataType(S, 563, SS_DOUBLE); 
ssSetOutputPortWidth(S, 563, 1); 
/* ObstacleDataC7.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 564, SS_DOUBLE); 
ssSetOutputPortWidth(S, 564, 1); 
/* ObstacleDataC7.ObstacleVelY */ 
ssSetOutputPortDataType(S, 565, SS_DOUBLE); 
ssSetOutputPortWidth(S, 565, 1); 
/* ObstacleDataC7.reserved_5 */ 
ssSetOutputPortDataType(S, 566, SS_UINT8); 
ssSetOutputPortWidth(S, 566, 1); 
/* ObstacleDataC7.Object_Accel_X */ 
ssSetOutputPortDataType(S, 567, SS_DOUBLE); 
ssSetOutputPortWidth(S, 567, 1); 
/* ObstacleDataC7.reserved_2 */ 
ssSetOutputPortDataType(S, 568, SS_UINT8); 
ssSetOutputPortWidth(S, 568, 1); 
/* ObstacleDataC7.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 569, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 569, 1); 
/* ObstacleDataC7.reserved_3 */ 
ssSetOutputPortDataType(S, 570, SS_UINT8); 
ssSetOutputPortWidth(S, 570, 1); 
/* ObstacleDataC7.ObstacleAngle */ 
ssSetOutputPortDataType(S, 571, SS_DOUBLE); 
ssSetOutputPortWidth(S, 571, 1); 
/* ObstacleDataC7 RX_STATUS */ 
ssSetOutputPortDataType(S, 572, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 572, 1); 
/* ObstacleDataC7 time */ 
ssSetOutputPortDataType(S, 573, SS_DOUBLE); 
ssSetOutputPortWidth(S, 573, 1); 
/* ObstacleDataC7 deltatime */ 
ssSetOutputPortDataType(S, 574, SS_DOUBLE); 
ssSetOutputPortWidth(S, 574, 1); 
/* ObstacleDataC8.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 575, SS_DOUBLE); 
ssSetOutputPortWidth(S, 575, 1); 
/* ObstacleDataC8.ObstacleVelY */ 
ssSetOutputPortDataType(S, 576, SS_DOUBLE); 
ssSetOutputPortWidth(S, 576, 1); 
/* ObstacleDataC8.reserved_5 */ 
ssSetOutputPortDataType(S, 577, SS_UINT8); 
ssSetOutputPortWidth(S, 577, 1); 
/* ObstacleDataC8.Object_Accel_X */ 
ssSetOutputPortDataType(S, 578, SS_DOUBLE); 
ssSetOutputPortWidth(S, 578, 1); 
/* ObstacleDataC8.reserved_2 */ 
ssSetOutputPortDataType(S, 579, SS_UINT8); 
ssSetOutputPortWidth(S, 579, 1); 
/* ObstacleDataC8.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 580, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 580, 1); 
/* ObstacleDataC8.reserved_3 */ 
ssSetOutputPortDataType(S, 581, SS_UINT8); 
ssSetOutputPortWidth(S, 581, 1); 
/* ObstacleDataC8.ObstacleAngle */ 
ssSetOutputPortDataType(S, 582, SS_DOUBLE); 
ssSetOutputPortWidth(S, 582, 1); 
/* ObstacleDataC8 RX_STATUS */ 
ssSetOutputPortDataType(S, 583, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 583, 1); 
/* ObstacleDataC8 time */ 
ssSetOutputPortDataType(S, 584, SS_DOUBLE); 
ssSetOutputPortWidth(S, 584, 1); 
/* ObstacleDataC8 deltatime */ 
ssSetOutputPortDataType(S, 585, SS_DOUBLE); 
ssSetOutputPortWidth(S, 585, 1); 
/* ObstacleDataC9.ObstacleAngleRate */ 
ssSetOutputPortDataType(S, 586, SS_DOUBLE); 
ssSetOutputPortWidth(S, 586, 1); 
/* ObstacleDataC9.ObstacleVelY */ 
ssSetOutputPortDataType(S, 587, SS_DOUBLE); 
ssSetOutputPortWidth(S, 587, 1); 
/* ObstacleDataC9.reserved_5 */ 
ssSetOutputPortDataType(S, 588, SS_UINT8); 
ssSetOutputPortWidth(S, 588, 1); 
/* ObstacleDataC9.Object_Accel_X */ 
ssSetOutputPortDataType(S, 589, SS_DOUBLE); 
ssSetOutputPortWidth(S, 589, 1); 
/* ObstacleDataC9.reserved_2 */ 
ssSetOutputPortDataType(S, 590, SS_UINT8); 
ssSetOutputPortWidth(S, 590, 1); 
/* ObstacleDataC9.ObstacleReplaced */ 
ssSetOutputPortDataType(S, 591, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 591, 1); 
/* ObstacleDataC9.reserved_3 */ 
ssSetOutputPortDataType(S, 592, SS_UINT8); 
ssSetOutputPortWidth(S, 592, 1); 
/* ObstacleDataC9.ObstacleAngle */ 
ssSetOutputPortDataType(S, 593, SS_DOUBLE); 
ssSetOutputPortWidth(S, 593, 1); 
/* ObstacleDataC9 RX_STATUS */ 
ssSetOutputPortDataType(S, 594, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 594, 1); 
/* ObstacleDataC9 time */ 
ssSetOutputPortDataType(S, 595, SS_DOUBLE); 
ssSetOutputPortWidth(S, 595, 1); 
/* ObstacleDataC9 deltatime */ 
ssSetOutputPortDataType(S, 596, SS_DOUBLE); 
ssSetOutputPortWidth(S, 596, 1); 
/* ObstacleStatusA.NumObstacles */ 
ssSetOutputPortDataType(S, 597, SS_UINT8); 
ssSetOutputPortWidth(S, 597, 1); 
/* ObstacleStatusA.Timestamp */ 
ssSetOutputPortDataType(S, 598, SS_UINT8); 
ssSetOutputPortWidth(S, 598, 1); 
/* ObstacleStatusA.ApplicationVersion_minor */ 
ssSetOutputPortDataType(S, 599, SS_UINT8); 
ssSetOutputPortWidth(S, 599, 1); 
/* ObstacleStatusA.ApplicationVersion_rc */ 
ssSetOutputPortDataType(S, 600, SS_UINT8); 
ssSetOutputPortWidth(S, 600, 1); 
/* ObstacleStatusA.ProtocolVersion */ 
ssSetOutputPortDataType(S, 601, SS_UINT8); 
ssSetOutputPortWidth(S, 601, 1); 
/* ObstacleStatusA.Go */ 
ssSetOutputPortDataType(S, 602, SS_UINT8); 
ssSetOutputPortWidth(S, 602, 1); 
/* ObstacleStatusA.Close_Car */ 
ssSetOutputPortDataType(S, 603, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 603, 1); 
/* ObstacleStatusA.RightCloseRangeCutIn */ 
ssSetOutputPortDataType(S, 604, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 604, 1); 
/* ObstacleStatusA.LeftCloseRangeCutIn */ 
ssSetOutputPortDataType(S, 605, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 605, 1); 
/* ObstacleStatusA.Failsafe */ 
ssSetOutputPortDataType(S, 606, SS_UINT16); 
ssSetOutputPortWidth(S, 606, 1); 
/* ObstacleStatusA.reserved_3 */ 
ssSetOutputPortDataType(S, 607, SS_UINT8); 
ssSetOutputPortWidth(S, 607, 1); 
/* ObstacleStatusA RX_STATUS */ 
ssSetOutputPortDataType(S, 608, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 608, 1); 
/* ObstacleStatusA time */ 
ssSetOutputPortDataType(S, 609, SS_DOUBLE); 
ssSetOutputPortWidth(S, 609, 1); 
/* ObstacleStatusA deltatime */ 
ssSetOutputPortDataType(S, 610, SS_DOUBLE); 
ssSetOutputPortWidth(S, 610, 1); 
/* ObstacleStatusB.timeStamp */ 
ssSetOutputPortDataType(S, 611, SS_UINT32); 
ssSetOutputPortWidth(S, 611, 1); 
/* ObstacleStatusB.frameIndex */ 
ssSetOutputPortDataType(S, 612, SS_UINT32); 
ssSetOutputPortWidth(S, 612, 1); 
/* ObstacleStatusB RX_STATUS */ 
ssSetOutputPortDataType(S, 613, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 613, 1); 
/* ObstacleStatusB time */ 
ssSetOutputPortDataType(S, 614, SS_DOUBLE); 
ssSetOutputPortWidth(S, 614, 1); 
/* ObstacleStatusB deltatime */ 
ssSetOutputPortDataType(S, 615, SS_DOUBLE); 
ssSetOutputPortWidth(S, 615, 1); 
/* ObstacleStatusC.grabIndex */ 
ssSetOutputPortDataType(S, 616, SS_UINT16); 
ssSetOutputPortWidth(S, 616, 1); 
/* ObstacleStatusC.pedalConfGenObjDistFromBumper */ 
ssSetOutputPortDataType(S, 617, SS_DOUBLE); 
ssSetOutputPortWidth(S, 617, 1); 
/* ObstacleStatusC.pedalConfusionGeneralObjTTC */ 
ssSetOutputPortDataType(S, 618, SS_DOUBLE); 
ssSetOutputPortWidth(S, 618, 1); 
/* ObstacleStatusC.reserved_6 */ 
ssSetOutputPortDataType(S, 619, SS_UINT32); 
ssSetOutputPortWidth(S, 619, 1); 
/* ObstacleStatusC RX_STATUS */ 
ssSetOutputPortDataType(S, 620, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 620, 1); 
/* ObstacleStatusC time */ 
ssSetOutputPortDataType(S, 621, SS_DOUBLE); 
ssSetOutputPortWidth(S, 621, 1); 
/* ObstacleStatusC deltatime */ 
ssSetOutputPortDataType(S, 622, SS_DOUBLE); 
ssSetOutputPortWidth(S, 622, 1); 
/* Road_Information.Construction_Area */ 
ssSetOutputPortDataType(S, 623, SS_UINT8); 
ssSetOutputPortWidth(S, 623, 1); 
/* Road_Information.Road_Type */ 
ssSetOutputPortDataType(S, 624, SS_UINT8); 
ssSetOutputPortWidth(S, 624, 1); 
/* Road_Information.Highway_Exit_Right */ 
ssSetOutputPortDataType(S, 625, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 625, 1); 
/* Road_Information.Highway_Exit_Left */ 
ssSetOutputPortDataType(S, 626, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 626, 1); 
/* Road_Information.Probability_Of_Left_Lane */ 
ssSetOutputPortDataType(S, 627, SS_DOUBLE); 
ssSetOutputPortWidth(S, 627, 1); 
/* Road_Information.Probability_Of_Right_Lane */ 
ssSetOutputPortDataType(S, 628, SS_DOUBLE); 
ssSetOutputPortWidth(S, 628, 1); 
/* Road_Information.Driving_Speed_Left_Lane */ 
ssSetOutputPortDataType(S, 629, SS_DOUBLE); 
ssSetOutputPortWidth(S, 629, 1); 
/* Road_Information.Driving_Speed_Right_Lane */ 
ssSetOutputPortDataType(S, 630, SS_DOUBLE); 
ssSetOutputPortWidth(S, 630, 1); 
/* Road_Information.protocol_version */ 
ssSetOutputPortDataType(S, 631, SS_UINT8); 
ssSetOutputPortWidth(S, 631, 1); 
/* Road_Information RX_STATUS */ 
ssSetOutputPortDataType(S, 632, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 632, 1); 
/* Road_Information time */ 
ssSetOutputPortDataType(S, 633, SS_DOUBLE); 
ssSetOutputPortWidth(S, 633, 1); 
/* Road_Information deltatime */ 
ssSetOutputPortDataType(S, 634, SS_DOUBLE); 
ssSetOutputPortWidth(S, 634, 1); 
/* CAPTURE MESSAGES 1*/ 
ssSetOutputPortDataType(S, 635, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 635, 1); 
ssSetOutputPortDataType(S, 636, SS_DOUBLE); 
ssSetOutputPortWidth(S, 636, 1); 
ssSetOutputPortDataType(S, 637, SS_UINT32); 
ssSetOutputPortWidth(S, 637, 1); 
ssSetOutputPortDataType(S, 638, SS_UINT8); 
ssSetOutputPortWidth(S, 638, 1); 
ssSetOutputPortDataType(S, 639, SS_UINT8); 
ssSetOutputPortWidth(S, 639, 1); 
ssSetOutputPortDataType(S, 640, SS_UINT8); 
ssSetOutputPortWidth(S, 640, 1); 
ssSetOutputPortDataType(S, 641, SS_UINT8); 
ssSetOutputPortWidth(S, 641, 1); 
ssSetOutputPortDataType(S, 642, SS_UINT8); 
ssSetOutputPortWidth(S, 642, 1); 
ssSetOutputPortDataType(S, 643, SS_UINT8); 
ssSetOutputPortWidth(S, 643, 1); 
ssSetOutputPortDataType(S, 644, SS_UINT8); 
ssSetOutputPortWidth(S, 644, 1); 
ssSetOutputPortDataType(S, 645, SS_UINT8); 
ssSetOutputPortWidth(S, 645, 1); 
ssSetOutputPortDataType(S, 646, SS_UINT8); 
ssSetOutputPortWidth(S, 646, 1); 
ssSetOutputPortDataType(S, 647, SS_UINT8); 
ssSetOutputPortWidth(S, 647, 1); 
/* CAPTURE MESSAGES 2*/ 
ssSetOutputPortDataType(S, 648, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 648, 1); 
ssSetOutputPortDataType(S, 649, SS_DOUBLE); 
ssSetOutputPortWidth(S, 649, 1); 
ssSetOutputPortDataType(S, 650, SS_UINT32); 
ssSetOutputPortWidth(S, 650, 1); 
ssSetOutputPortDataType(S, 651, SS_UINT8); 
ssSetOutputPortWidth(S, 651, 1); 
ssSetOutputPortDataType(S, 652, SS_UINT8); 
ssSetOutputPortWidth(S, 652, 1); 
ssSetOutputPortDataType(S, 653, SS_UINT8); 
ssSetOutputPortWidth(S, 653, 1); 
ssSetOutputPortDataType(S, 654, SS_UINT8); 
ssSetOutputPortWidth(S, 654, 1); 
ssSetOutputPortDataType(S, 655, SS_UINT8); 
ssSetOutputPortWidth(S, 655, 1); 
ssSetOutputPortDataType(S, 656, SS_UINT8); 
ssSetOutputPortWidth(S, 656, 1); 
ssSetOutputPortDataType(S, 657, SS_UINT8); 
ssSetOutputPortWidth(S, 657, 1); 
ssSetOutputPortDataType(S, 658, SS_UINT8); 
ssSetOutputPortWidth(S, 658, 1); 
ssSetOutputPortDataType(S, 659, SS_UINT8); 
ssSetOutputPortWidth(S, 659, 1); 
ssSetOutputPortDataType(S, 660, SS_UINT8); 
ssSetOutputPortWidth(S, 660, 1); 
/* CAPTURE MESSAGES 3*/ 
ssSetOutputPortDataType(S, 661, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 661, 1); 
ssSetOutputPortDataType(S, 662, SS_DOUBLE); 
ssSetOutputPortWidth(S, 662, 1); 
ssSetOutputPortDataType(S, 663, SS_UINT32); 
ssSetOutputPortWidth(S, 663, 1); 
ssSetOutputPortDataType(S, 664, SS_UINT8); 
ssSetOutputPortWidth(S, 664, 1); 
ssSetOutputPortDataType(S, 665, SS_UINT8); 
ssSetOutputPortWidth(S, 665, 1); 
ssSetOutputPortDataType(S, 666, SS_UINT8); 
ssSetOutputPortWidth(S, 666, 1); 
ssSetOutputPortDataType(S, 667, SS_UINT8); 
ssSetOutputPortWidth(S, 667, 1); 
ssSetOutputPortDataType(S, 668, SS_UINT8); 
ssSetOutputPortWidth(S, 668, 1); 
ssSetOutputPortDataType(S, 669, SS_UINT8); 
ssSetOutputPortWidth(S, 669, 1); 
ssSetOutputPortDataType(S, 670, SS_UINT8); 
ssSetOutputPortWidth(S, 670, 1); 
ssSetOutputPortDataType(S, 671, SS_UINT8); 
ssSetOutputPortWidth(S, 671, 1); 
ssSetOutputPortDataType(S, 672, SS_UINT8); 
ssSetOutputPortWidth(S, 672, 1); 
ssSetOutputPortDataType(S, 673, SS_UINT8); 
ssSetOutputPortWidth(S, 673, 1); 
/* CAPTURE MESSAGES 4*/ 
ssSetOutputPortDataType(S, 674, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 674, 1); 
ssSetOutputPortDataType(S, 675, SS_DOUBLE); 
ssSetOutputPortWidth(S, 675, 1); 
ssSetOutputPortDataType(S, 676, SS_UINT32); 
ssSetOutputPortWidth(S, 676, 1); 
ssSetOutputPortDataType(S, 677, SS_UINT8); 
ssSetOutputPortWidth(S, 677, 1); 
ssSetOutputPortDataType(S, 678, SS_UINT8); 
ssSetOutputPortWidth(S, 678, 1); 
ssSetOutputPortDataType(S, 679, SS_UINT8); 
ssSetOutputPortWidth(S, 679, 1); 
ssSetOutputPortDataType(S, 680, SS_UINT8); 
ssSetOutputPortWidth(S, 680, 1); 
ssSetOutputPortDataType(S, 681, SS_UINT8); 
ssSetOutputPortWidth(S, 681, 1); 
ssSetOutputPortDataType(S, 682, SS_UINT8); 
ssSetOutputPortWidth(S, 682, 1); 
ssSetOutputPortDataType(S, 683, SS_UINT8); 
ssSetOutputPortWidth(S, 683, 1); 
ssSetOutputPortDataType(S, 684, SS_UINT8); 
ssSetOutputPortWidth(S, 684, 1); 
ssSetOutputPortDataType(S, 685, SS_UINT8); 
ssSetOutputPortWidth(S, 685, 1); 
ssSetOutputPortDataType(S, 686, SS_UINT8); 
ssSetOutputPortWidth(S, 686, 1); 
/* CAPTURE MESSAGES 5*/ 
ssSetOutputPortDataType(S, 687, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 687, 1); 
ssSetOutputPortDataType(S, 688, SS_DOUBLE); 
ssSetOutputPortWidth(S, 688, 1); 
ssSetOutputPortDataType(S, 689, SS_UINT32); 
ssSetOutputPortWidth(S, 689, 1); 
ssSetOutputPortDataType(S, 690, SS_UINT8); 
ssSetOutputPortWidth(S, 690, 1); 
ssSetOutputPortDataType(S, 691, SS_UINT8); 
ssSetOutputPortWidth(S, 691, 1); 
ssSetOutputPortDataType(S, 692, SS_UINT8); 
ssSetOutputPortWidth(S, 692, 1); 
ssSetOutputPortDataType(S, 693, SS_UINT8); 
ssSetOutputPortWidth(S, 693, 1); 
ssSetOutputPortDataType(S, 694, SS_UINT8); 
ssSetOutputPortWidth(S, 694, 1); 
ssSetOutputPortDataType(S, 695, SS_UINT8); 
ssSetOutputPortWidth(S, 695, 1); 
ssSetOutputPortDataType(S, 696, SS_UINT8); 
ssSetOutputPortWidth(S, 696, 1); 
ssSetOutputPortDataType(S, 697, SS_UINT8); 
ssSetOutputPortWidth(S, 697, 1); 
ssSetOutputPortDataType(S, 698, SS_UINT8); 
ssSetOutputPortWidth(S, 698, 1); 
ssSetOutputPortDataType(S, 699, SS_UINT8); 
ssSetOutputPortWidth(S, 699, 1); 
/* CAPTURE MESSAGES 6*/ 
ssSetOutputPortDataType(S, 700, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 700, 1); 
ssSetOutputPortDataType(S, 701, SS_DOUBLE); 
ssSetOutputPortWidth(S, 701, 1); 
ssSetOutputPortDataType(S, 702, SS_UINT32); 
ssSetOutputPortWidth(S, 702, 1); 
ssSetOutputPortDataType(S, 703, SS_UINT8); 
ssSetOutputPortWidth(S, 703, 1); 
ssSetOutputPortDataType(S, 704, SS_UINT8); 
ssSetOutputPortWidth(S, 704, 1); 
ssSetOutputPortDataType(S, 705, SS_UINT8); 
ssSetOutputPortWidth(S, 705, 1); 
ssSetOutputPortDataType(S, 706, SS_UINT8); 
ssSetOutputPortWidth(S, 706, 1); 
ssSetOutputPortDataType(S, 707, SS_UINT8); 
ssSetOutputPortWidth(S, 707, 1); 
ssSetOutputPortDataType(S, 708, SS_UINT8); 
ssSetOutputPortWidth(S, 708, 1); 
ssSetOutputPortDataType(S, 709, SS_UINT8); 
ssSetOutputPortWidth(S, 709, 1); 
ssSetOutputPortDataType(S, 710, SS_UINT8); 
ssSetOutputPortWidth(S, 710, 1); 
ssSetOutputPortDataType(S, 711, SS_UINT8); 
ssSetOutputPortWidth(S, 711, 1); 
ssSetOutputPortDataType(S, 712, SS_UINT8); 
ssSetOutputPortWidth(S, 712, 1); 
/* CAPTURE MESSAGES 7*/ 
ssSetOutputPortDataType(S, 713, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 713, 1); 
ssSetOutputPortDataType(S, 714, SS_DOUBLE); 
ssSetOutputPortWidth(S, 714, 1); 
ssSetOutputPortDataType(S, 715, SS_UINT32); 
ssSetOutputPortWidth(S, 715, 1); 
ssSetOutputPortDataType(S, 716, SS_UINT8); 
ssSetOutputPortWidth(S, 716, 1); 
ssSetOutputPortDataType(S, 717, SS_UINT8); 
ssSetOutputPortWidth(S, 717, 1); 
ssSetOutputPortDataType(S, 718, SS_UINT8); 
ssSetOutputPortWidth(S, 718, 1); 
ssSetOutputPortDataType(S, 719, SS_UINT8); 
ssSetOutputPortWidth(S, 719, 1); 
ssSetOutputPortDataType(S, 720, SS_UINT8); 
ssSetOutputPortWidth(S, 720, 1); 
ssSetOutputPortDataType(S, 721, SS_UINT8); 
ssSetOutputPortWidth(S, 721, 1); 
ssSetOutputPortDataType(S, 722, SS_UINT8); 
ssSetOutputPortWidth(S, 722, 1); 
ssSetOutputPortDataType(S, 723, SS_UINT8); 
ssSetOutputPortWidth(S, 723, 1); 
ssSetOutputPortDataType(S, 724, SS_UINT8); 
ssSetOutputPortWidth(S, 724, 1); 
ssSetOutputPortDataType(S, 725, SS_UINT8); 
ssSetOutputPortWidth(S, 725, 1); 
/* CAPTURE MESSAGES 8*/ 
ssSetOutputPortDataType(S, 726, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 726, 1); 
ssSetOutputPortDataType(S, 727, SS_DOUBLE); 
ssSetOutputPortWidth(S, 727, 1); 
ssSetOutputPortDataType(S, 728, SS_UINT32); 
ssSetOutputPortWidth(S, 728, 1); 
ssSetOutputPortDataType(S, 729, SS_UINT8); 
ssSetOutputPortWidth(S, 729, 1); 
ssSetOutputPortDataType(S, 730, SS_UINT8); 
ssSetOutputPortWidth(S, 730, 1); 
ssSetOutputPortDataType(S, 731, SS_UINT8); 
ssSetOutputPortWidth(S, 731, 1); 
ssSetOutputPortDataType(S, 732, SS_UINT8); 
ssSetOutputPortWidth(S, 732, 1); 
ssSetOutputPortDataType(S, 733, SS_UINT8); 
ssSetOutputPortWidth(S, 733, 1); 
ssSetOutputPortDataType(S, 734, SS_UINT8); 
ssSetOutputPortWidth(S, 734, 1); 
ssSetOutputPortDataType(S, 735, SS_UINT8); 
ssSetOutputPortWidth(S, 735, 1); 
ssSetOutputPortDataType(S, 736, SS_UINT8); 
ssSetOutputPortWidth(S, 736, 1); 
ssSetOutputPortDataType(S, 737, SS_UINT8); 
ssSetOutputPortWidth(S, 737, 1); 
ssSetOutputPortDataType(S, 738, SS_UINT8); 
ssSetOutputPortWidth(S, 738, 1); 
/* CAPTURE MESSAGES 9*/ 
ssSetOutputPortDataType(S, 739, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 739, 1); 
ssSetOutputPortDataType(S, 740, SS_DOUBLE); 
ssSetOutputPortWidth(S, 740, 1); 
ssSetOutputPortDataType(S, 741, SS_UINT32); 
ssSetOutputPortWidth(S, 741, 1); 
ssSetOutputPortDataType(S, 742, SS_UINT8); 
ssSetOutputPortWidth(S, 742, 1); 
ssSetOutputPortDataType(S, 743, SS_UINT8); 
ssSetOutputPortWidth(S, 743, 1); 
ssSetOutputPortDataType(S, 744, SS_UINT8); 
ssSetOutputPortWidth(S, 744, 1); 
ssSetOutputPortDataType(S, 745, SS_UINT8); 
ssSetOutputPortWidth(S, 745, 1); 
ssSetOutputPortDataType(S, 746, SS_UINT8); 
ssSetOutputPortWidth(S, 746, 1); 
ssSetOutputPortDataType(S, 747, SS_UINT8); 
ssSetOutputPortWidth(S, 747, 1); 
ssSetOutputPortDataType(S, 748, SS_UINT8); 
ssSetOutputPortWidth(S, 748, 1); 
ssSetOutputPortDataType(S, 749, SS_UINT8); 
ssSetOutputPortWidth(S, 749, 1); 
ssSetOutputPortDataType(S, 750, SS_UINT8); 
ssSetOutputPortWidth(S, 750, 1); 
ssSetOutputPortDataType(S, 751, SS_UINT8); 
ssSetOutputPortWidth(S, 751, 1); 
/* CAPTURE MESSAGES 10*/ 
ssSetOutputPortDataType(S, 752, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 752, 1); 
ssSetOutputPortDataType(S, 753, SS_DOUBLE); 
ssSetOutputPortWidth(S, 753, 1); 
ssSetOutputPortDataType(S, 754, SS_UINT32); 
ssSetOutputPortWidth(S, 754, 1); 
ssSetOutputPortDataType(S, 755, SS_UINT8); 
ssSetOutputPortWidth(S, 755, 1); 
ssSetOutputPortDataType(S, 756, SS_UINT8); 
ssSetOutputPortWidth(S, 756, 1); 
ssSetOutputPortDataType(S, 757, SS_UINT8); 
ssSetOutputPortWidth(S, 757, 1); 
ssSetOutputPortDataType(S, 758, SS_UINT8); 
ssSetOutputPortWidth(S, 758, 1); 
ssSetOutputPortDataType(S, 759, SS_UINT8); 
ssSetOutputPortWidth(S, 759, 1); 
ssSetOutputPortDataType(S, 760, SS_UINT8); 
ssSetOutputPortWidth(S, 760, 1); 
ssSetOutputPortDataType(S, 761, SS_UINT8); 
ssSetOutputPortWidth(S, 761, 1); 
ssSetOutputPortDataType(S, 762, SS_UINT8); 
ssSetOutputPortWidth(S, 762, 1); 
ssSetOutputPortDataType(S, 763, SS_UINT8); 
ssSetOutputPortWidth(S, 763, 1); 
ssSetOutputPortDataType(S, 764, SS_UINT8); 
ssSetOutputPortWidth(S, 764, 1); 
/* CAPTURE MESSAGES 11*/ 
ssSetOutputPortDataType(S, 765, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 765, 1); 
ssSetOutputPortDataType(S, 766, SS_DOUBLE); 
ssSetOutputPortWidth(S, 766, 1); 
ssSetOutputPortDataType(S, 767, SS_UINT32); 
ssSetOutputPortWidth(S, 767, 1); 
ssSetOutputPortDataType(S, 768, SS_UINT8); 
ssSetOutputPortWidth(S, 768, 1); 
ssSetOutputPortDataType(S, 769, SS_UINT8); 
ssSetOutputPortWidth(S, 769, 1); 
ssSetOutputPortDataType(S, 770, SS_UINT8); 
ssSetOutputPortWidth(S, 770, 1); 
ssSetOutputPortDataType(S, 771, SS_UINT8); 
ssSetOutputPortWidth(S, 771, 1); 
ssSetOutputPortDataType(S, 772, SS_UINT8); 
ssSetOutputPortWidth(S, 772, 1); 
ssSetOutputPortDataType(S, 773, SS_UINT8); 
ssSetOutputPortWidth(S, 773, 1); 
ssSetOutputPortDataType(S, 774, SS_UINT8); 
ssSetOutputPortWidth(S, 774, 1); 
ssSetOutputPortDataType(S, 775, SS_UINT8); 
ssSetOutputPortWidth(S, 775, 1); 
ssSetOutputPortDataType(S, 776, SS_UINT8); 
ssSetOutputPortWidth(S, 776, 1); 
ssSetOutputPortDataType(S, 777, SS_UINT8); 
ssSetOutputPortWidth(S, 777, 1); 
/* CAPTURE MESSAGES 12*/ 
ssSetOutputPortDataType(S, 778, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 778, 1); 
ssSetOutputPortDataType(S, 779, SS_DOUBLE); 
ssSetOutputPortWidth(S, 779, 1); 
ssSetOutputPortDataType(S, 780, SS_UINT32); 
ssSetOutputPortWidth(S, 780, 1); 
ssSetOutputPortDataType(S, 781, SS_UINT8); 
ssSetOutputPortWidth(S, 781, 1); 
ssSetOutputPortDataType(S, 782, SS_UINT8); 
ssSetOutputPortWidth(S, 782, 1); 
ssSetOutputPortDataType(S, 783, SS_UINT8); 
ssSetOutputPortWidth(S, 783, 1); 
ssSetOutputPortDataType(S, 784, SS_UINT8); 
ssSetOutputPortWidth(S, 784, 1); 
ssSetOutputPortDataType(S, 785, SS_UINT8); 
ssSetOutputPortWidth(S, 785, 1); 
ssSetOutputPortDataType(S, 786, SS_UINT8); 
ssSetOutputPortWidth(S, 786, 1); 
ssSetOutputPortDataType(S, 787, SS_UINT8); 
ssSetOutputPortWidth(S, 787, 1); 
ssSetOutputPortDataType(S, 788, SS_UINT8); 
ssSetOutputPortWidth(S, 788, 1); 
ssSetOutputPortDataType(S, 789, SS_UINT8); 
ssSetOutputPortWidth(S, 789, 1); 
ssSetOutputPortDataType(S, 790, SS_UINT8); 
ssSetOutputPortWidth(S, 790, 1); 
/* CAPTURE MESSAGES 13*/ 
ssSetOutputPortDataType(S, 791, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 791, 1); 
ssSetOutputPortDataType(S, 792, SS_DOUBLE); 
ssSetOutputPortWidth(S, 792, 1); 
ssSetOutputPortDataType(S, 793, SS_UINT32); 
ssSetOutputPortWidth(S, 793, 1); 
ssSetOutputPortDataType(S, 794, SS_UINT8); 
ssSetOutputPortWidth(S, 794, 1); 
ssSetOutputPortDataType(S, 795, SS_UINT8); 
ssSetOutputPortWidth(S, 795, 1); 
ssSetOutputPortDataType(S, 796, SS_UINT8); 
ssSetOutputPortWidth(S, 796, 1); 
ssSetOutputPortDataType(S, 797, SS_UINT8); 
ssSetOutputPortWidth(S, 797, 1); 
ssSetOutputPortDataType(S, 798, SS_UINT8); 
ssSetOutputPortWidth(S, 798, 1); 
ssSetOutputPortDataType(S, 799, SS_UINT8); 
ssSetOutputPortWidth(S, 799, 1); 
ssSetOutputPortDataType(S, 800, SS_UINT8); 
ssSetOutputPortWidth(S, 800, 1); 
ssSetOutputPortDataType(S, 801, SS_UINT8); 
ssSetOutputPortWidth(S, 801, 1); 
ssSetOutputPortDataType(S, 802, SS_UINT8); 
ssSetOutputPortWidth(S, 802, 1); 
ssSetOutputPortDataType(S, 803, SS_UINT8); 
ssSetOutputPortWidth(S, 803, 1); 
/* CAPTURE MESSAGES 14*/ 
ssSetOutputPortDataType(S, 804, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 804, 1); 
ssSetOutputPortDataType(S, 805, SS_DOUBLE); 
ssSetOutputPortWidth(S, 805, 1); 
ssSetOutputPortDataType(S, 806, SS_UINT32); 
ssSetOutputPortWidth(S, 806, 1); 
ssSetOutputPortDataType(S, 807, SS_UINT8); 
ssSetOutputPortWidth(S, 807, 1); 
ssSetOutputPortDataType(S, 808, SS_UINT8); 
ssSetOutputPortWidth(S, 808, 1); 
ssSetOutputPortDataType(S, 809, SS_UINT8); 
ssSetOutputPortWidth(S, 809, 1); 
ssSetOutputPortDataType(S, 810, SS_UINT8); 
ssSetOutputPortWidth(S, 810, 1); 
ssSetOutputPortDataType(S, 811, SS_UINT8); 
ssSetOutputPortWidth(S, 811, 1); 
ssSetOutputPortDataType(S, 812, SS_UINT8); 
ssSetOutputPortWidth(S, 812, 1); 
ssSetOutputPortDataType(S, 813, SS_UINT8); 
ssSetOutputPortWidth(S, 813, 1); 
ssSetOutputPortDataType(S, 814, SS_UINT8); 
ssSetOutputPortWidth(S, 814, 1); 
ssSetOutputPortDataType(S, 815, SS_UINT8); 
ssSetOutputPortWidth(S, 815, 1); 
ssSetOutputPortDataType(S, 816, SS_UINT8); 
ssSetOutputPortWidth(S, 816, 1); 
/* CAPTURE MESSAGES 15*/ 
ssSetOutputPortDataType(S, 817, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 817, 1); 
ssSetOutputPortDataType(S, 818, SS_DOUBLE); 
ssSetOutputPortWidth(S, 818, 1); 
ssSetOutputPortDataType(S, 819, SS_UINT32); 
ssSetOutputPortWidth(S, 819, 1); 
ssSetOutputPortDataType(S, 820, SS_UINT8); 
ssSetOutputPortWidth(S, 820, 1); 
ssSetOutputPortDataType(S, 821, SS_UINT8); 
ssSetOutputPortWidth(S, 821, 1); 
ssSetOutputPortDataType(S, 822, SS_UINT8); 
ssSetOutputPortWidth(S, 822, 1); 
ssSetOutputPortDataType(S, 823, SS_UINT8); 
ssSetOutputPortWidth(S, 823, 1); 
ssSetOutputPortDataType(S, 824, SS_UINT8); 
ssSetOutputPortWidth(S, 824, 1); 
ssSetOutputPortDataType(S, 825, SS_UINT8); 
ssSetOutputPortWidth(S, 825, 1); 
ssSetOutputPortDataType(S, 826, SS_UINT8); 
ssSetOutputPortWidth(S, 826, 1); 
ssSetOutputPortDataType(S, 827, SS_UINT8); 
ssSetOutputPortWidth(S, 827, 1); 
ssSetOutputPortDataType(S, 828, SS_UINT8); 
ssSetOutputPortWidth(S, 828, 1); 
ssSetOutputPortDataType(S, 829, SS_UINT8); 
ssSetOutputPortWidth(S, 829, 1); 
/* CAPTURE MESSAGES 16*/ 
ssSetOutputPortDataType(S, 830, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 830, 1); 
ssSetOutputPortDataType(S, 831, SS_DOUBLE); 
ssSetOutputPortWidth(S, 831, 1); 
ssSetOutputPortDataType(S, 832, SS_UINT32); 
ssSetOutputPortWidth(S, 832, 1); 
ssSetOutputPortDataType(S, 833, SS_UINT8); 
ssSetOutputPortWidth(S, 833, 1); 
ssSetOutputPortDataType(S, 834, SS_UINT8); 
ssSetOutputPortWidth(S, 834, 1); 
ssSetOutputPortDataType(S, 835, SS_UINT8); 
ssSetOutputPortWidth(S, 835, 1); 
ssSetOutputPortDataType(S, 836, SS_UINT8); 
ssSetOutputPortWidth(S, 836, 1); 
ssSetOutputPortDataType(S, 837, SS_UINT8); 
ssSetOutputPortWidth(S, 837, 1); 
ssSetOutputPortDataType(S, 838, SS_UINT8); 
ssSetOutputPortWidth(S, 838, 1); 
ssSetOutputPortDataType(S, 839, SS_UINT8); 
ssSetOutputPortWidth(S, 839, 1); 
ssSetOutputPortDataType(S, 840, SS_UINT8); 
ssSetOutputPortWidth(S, 840, 1); 
ssSetOutputPortDataType(S, 841, SS_UINT8); 
ssSetOutputPortWidth(S, 841, 1); 
ssSetOutputPortDataType(S, 842, SS_UINT8); 
ssSetOutputPortWidth(S, 842, 1); 
/* CAPTURE MESSAGES 17*/ 
ssSetOutputPortDataType(S, 843, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 843, 1); 
ssSetOutputPortDataType(S, 844, SS_DOUBLE); 
ssSetOutputPortWidth(S, 844, 1); 
ssSetOutputPortDataType(S, 845, SS_UINT32); 
ssSetOutputPortWidth(S, 845, 1); 
ssSetOutputPortDataType(S, 846, SS_UINT8); 
ssSetOutputPortWidth(S, 846, 1); 
ssSetOutputPortDataType(S, 847, SS_UINT8); 
ssSetOutputPortWidth(S, 847, 1); 
ssSetOutputPortDataType(S, 848, SS_UINT8); 
ssSetOutputPortWidth(S, 848, 1); 
ssSetOutputPortDataType(S, 849, SS_UINT8); 
ssSetOutputPortWidth(S, 849, 1); 
ssSetOutputPortDataType(S, 850, SS_UINT8); 
ssSetOutputPortWidth(S, 850, 1); 
ssSetOutputPortDataType(S, 851, SS_UINT8); 
ssSetOutputPortWidth(S, 851, 1); 
ssSetOutputPortDataType(S, 852, SS_UINT8); 
ssSetOutputPortWidth(S, 852, 1); 
ssSetOutputPortDataType(S, 853, SS_UINT8); 
ssSetOutputPortWidth(S, 853, 1); 
ssSetOutputPortDataType(S, 854, SS_UINT8); 
ssSetOutputPortWidth(S, 854, 1); 
ssSetOutputPortDataType(S, 855, SS_UINT8); 
ssSetOutputPortWidth(S, 855, 1); 
/* CAPTURE MESSAGES 18*/ 
ssSetOutputPortDataType(S, 856, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 856, 1); 
ssSetOutputPortDataType(S, 857, SS_DOUBLE); 
ssSetOutputPortWidth(S, 857, 1); 
ssSetOutputPortDataType(S, 858, SS_UINT32); 
ssSetOutputPortWidth(S, 858, 1); 
ssSetOutputPortDataType(S, 859, SS_UINT8); 
ssSetOutputPortWidth(S, 859, 1); 
ssSetOutputPortDataType(S, 860, SS_UINT8); 
ssSetOutputPortWidth(S, 860, 1); 
ssSetOutputPortDataType(S, 861, SS_UINT8); 
ssSetOutputPortWidth(S, 861, 1); 
ssSetOutputPortDataType(S, 862, SS_UINT8); 
ssSetOutputPortWidth(S, 862, 1); 
ssSetOutputPortDataType(S, 863, SS_UINT8); 
ssSetOutputPortWidth(S, 863, 1); 
ssSetOutputPortDataType(S, 864, SS_UINT8); 
ssSetOutputPortWidth(S, 864, 1); 
ssSetOutputPortDataType(S, 865, SS_UINT8); 
ssSetOutputPortWidth(S, 865, 1); 
ssSetOutputPortDataType(S, 866, SS_UINT8); 
ssSetOutputPortWidth(S, 866, 1); 
ssSetOutputPortDataType(S, 867, SS_UINT8); 
ssSetOutputPortWidth(S, 867, 1); 
ssSetOutputPortDataType(S, 868, SS_UINT8); 
ssSetOutputPortWidth(S, 868, 1); 
/* CAPTURE MESSAGES 19*/ 
ssSetOutputPortDataType(S, 869, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 869, 1); 
ssSetOutputPortDataType(S, 870, SS_DOUBLE); 
ssSetOutputPortWidth(S, 870, 1); 
ssSetOutputPortDataType(S, 871, SS_UINT32); 
ssSetOutputPortWidth(S, 871, 1); 
ssSetOutputPortDataType(S, 872, SS_UINT8); 
ssSetOutputPortWidth(S, 872, 1); 
ssSetOutputPortDataType(S, 873, SS_UINT8); 
ssSetOutputPortWidth(S, 873, 1); 
ssSetOutputPortDataType(S, 874, SS_UINT8); 
ssSetOutputPortWidth(S, 874, 1); 
ssSetOutputPortDataType(S, 875, SS_UINT8); 
ssSetOutputPortWidth(S, 875, 1); 
ssSetOutputPortDataType(S, 876, SS_UINT8); 
ssSetOutputPortWidth(S, 876, 1); 
ssSetOutputPortDataType(S, 877, SS_UINT8); 
ssSetOutputPortWidth(S, 877, 1); 
ssSetOutputPortDataType(S, 878, SS_UINT8); 
ssSetOutputPortWidth(S, 878, 1); 
ssSetOutputPortDataType(S, 879, SS_UINT8); 
ssSetOutputPortWidth(S, 879, 1); 
ssSetOutputPortDataType(S, 880, SS_UINT8); 
ssSetOutputPortWidth(S, 880, 1); 
ssSetOutputPortDataType(S, 881, SS_UINT8); 
ssSetOutputPortWidth(S, 881, 1); 
/* CAPTURE MESSAGES 20*/ 
ssSetOutputPortDataType(S, 882, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 882, 1); 
ssSetOutputPortDataType(S, 883, SS_DOUBLE); 
ssSetOutputPortWidth(S, 883, 1); 
ssSetOutputPortDataType(S, 884, SS_UINT32); 
ssSetOutputPortWidth(S, 884, 1); 
ssSetOutputPortDataType(S, 885, SS_UINT8); 
ssSetOutputPortWidth(S, 885, 1); 
ssSetOutputPortDataType(S, 886, SS_UINT8); 
ssSetOutputPortWidth(S, 886, 1); 
ssSetOutputPortDataType(S, 887, SS_UINT8); 
ssSetOutputPortWidth(S, 887, 1); 
ssSetOutputPortDataType(S, 888, SS_UINT8); 
ssSetOutputPortWidth(S, 888, 1); 
ssSetOutputPortDataType(S, 889, SS_UINT8); 
ssSetOutputPortWidth(S, 889, 1); 
ssSetOutputPortDataType(S, 890, SS_UINT8); 
ssSetOutputPortWidth(S, 890, 1); 
ssSetOutputPortDataType(S, 891, SS_UINT8); 
ssSetOutputPortWidth(S, 891, 1); 
ssSetOutputPortDataType(S, 892, SS_UINT8); 
ssSetOutputPortWidth(S, 892, 1); 
ssSetOutputPortDataType(S, 893, SS_UINT8); 
ssSetOutputPortWidth(S, 893, 1); 
ssSetOutputPortDataType(S, 894, SS_UINT8); 
ssSetOutputPortWidth(S, 894, 1); 
/* CAPTURE MESSAGES 21*/ 
ssSetOutputPortDataType(S, 895, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 895, 1); 
ssSetOutputPortDataType(S, 896, SS_DOUBLE); 
ssSetOutputPortWidth(S, 896, 1); 
ssSetOutputPortDataType(S, 897, SS_UINT32); 
ssSetOutputPortWidth(S, 897, 1); 
ssSetOutputPortDataType(S, 898, SS_UINT8); 
ssSetOutputPortWidth(S, 898, 1); 
ssSetOutputPortDataType(S, 899, SS_UINT8); 
ssSetOutputPortWidth(S, 899, 1); 
ssSetOutputPortDataType(S, 900, SS_UINT8); 
ssSetOutputPortWidth(S, 900, 1); 
ssSetOutputPortDataType(S, 901, SS_UINT8); 
ssSetOutputPortWidth(S, 901, 1); 
ssSetOutputPortDataType(S, 902, SS_UINT8); 
ssSetOutputPortWidth(S, 902, 1); 
ssSetOutputPortDataType(S, 903, SS_UINT8); 
ssSetOutputPortWidth(S, 903, 1); 
ssSetOutputPortDataType(S, 904, SS_UINT8); 
ssSetOutputPortWidth(S, 904, 1); 
ssSetOutputPortDataType(S, 905, SS_UINT8); 
ssSetOutputPortWidth(S, 905, 1); 
ssSetOutputPortDataType(S, 906, SS_UINT8); 
ssSetOutputPortWidth(S, 906, 1); 
ssSetOutputPortDataType(S, 907, SS_UINT8); 
ssSetOutputPortWidth(S, 907, 1); 
/* CAPTURE MESSAGES 22*/ 
ssSetOutputPortDataType(S, 908, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 908, 1); 
ssSetOutputPortDataType(S, 909, SS_DOUBLE); 
ssSetOutputPortWidth(S, 909, 1); 
ssSetOutputPortDataType(S, 910, SS_UINT32); 
ssSetOutputPortWidth(S, 910, 1); 
ssSetOutputPortDataType(S, 911, SS_UINT8); 
ssSetOutputPortWidth(S, 911, 1); 
ssSetOutputPortDataType(S, 912, SS_UINT8); 
ssSetOutputPortWidth(S, 912, 1); 
ssSetOutputPortDataType(S, 913, SS_UINT8); 
ssSetOutputPortWidth(S, 913, 1); 
ssSetOutputPortDataType(S, 914, SS_UINT8); 
ssSetOutputPortWidth(S, 914, 1); 
ssSetOutputPortDataType(S, 915, SS_UINT8); 
ssSetOutputPortWidth(S, 915, 1); 
ssSetOutputPortDataType(S, 916, SS_UINT8); 
ssSetOutputPortWidth(S, 916, 1); 
ssSetOutputPortDataType(S, 917, SS_UINT8); 
ssSetOutputPortWidth(S, 917, 1); 
ssSetOutputPortDataType(S, 918, SS_UINT8); 
ssSetOutputPortWidth(S, 918, 1); 
ssSetOutputPortDataType(S, 919, SS_UINT8); 
ssSetOutputPortWidth(S, 919, 1); 
ssSetOutputPortDataType(S, 920, SS_UINT8); 
ssSetOutputPortWidth(S, 920, 1); 
/* CAPTURE MESSAGES 23*/ 
ssSetOutputPortDataType(S, 921, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 921, 1); 
ssSetOutputPortDataType(S, 922, SS_DOUBLE); 
ssSetOutputPortWidth(S, 922, 1); 
ssSetOutputPortDataType(S, 923, SS_UINT32); 
ssSetOutputPortWidth(S, 923, 1); 
ssSetOutputPortDataType(S, 924, SS_UINT8); 
ssSetOutputPortWidth(S, 924, 1); 
ssSetOutputPortDataType(S, 925, SS_UINT8); 
ssSetOutputPortWidth(S, 925, 1); 
ssSetOutputPortDataType(S, 926, SS_UINT8); 
ssSetOutputPortWidth(S, 926, 1); 
ssSetOutputPortDataType(S, 927, SS_UINT8); 
ssSetOutputPortWidth(S, 927, 1); 
ssSetOutputPortDataType(S, 928, SS_UINT8); 
ssSetOutputPortWidth(S, 928, 1); 
ssSetOutputPortDataType(S, 929, SS_UINT8); 
ssSetOutputPortWidth(S, 929, 1); 
ssSetOutputPortDataType(S, 930, SS_UINT8); 
ssSetOutputPortWidth(S, 930, 1); 
ssSetOutputPortDataType(S, 931, SS_UINT8); 
ssSetOutputPortWidth(S, 931, 1); 
ssSetOutputPortDataType(S, 932, SS_UINT8); 
ssSetOutputPortWidth(S, 932, 1); 
ssSetOutputPortDataType(S, 933, SS_UINT8); 
ssSetOutputPortWidth(S, 933, 1); 
/* CAPTURE MESSAGES 24*/ 
ssSetOutputPortDataType(S, 934, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 934, 1); 
ssSetOutputPortDataType(S, 935, SS_DOUBLE); 
ssSetOutputPortWidth(S, 935, 1); 
ssSetOutputPortDataType(S, 936, SS_UINT32); 
ssSetOutputPortWidth(S, 936, 1); 
ssSetOutputPortDataType(S, 937, SS_UINT8); 
ssSetOutputPortWidth(S, 937, 1); 
ssSetOutputPortDataType(S, 938, SS_UINT8); 
ssSetOutputPortWidth(S, 938, 1); 
ssSetOutputPortDataType(S, 939, SS_UINT8); 
ssSetOutputPortWidth(S, 939, 1); 
ssSetOutputPortDataType(S, 940, SS_UINT8); 
ssSetOutputPortWidth(S, 940, 1); 
ssSetOutputPortDataType(S, 941, SS_UINT8); 
ssSetOutputPortWidth(S, 941, 1); 
ssSetOutputPortDataType(S, 942, SS_UINT8); 
ssSetOutputPortWidth(S, 942, 1); 
ssSetOutputPortDataType(S, 943, SS_UINT8); 
ssSetOutputPortWidth(S, 943, 1); 
ssSetOutputPortDataType(S, 944, SS_UINT8); 
ssSetOutputPortWidth(S, 944, 1); 
ssSetOutputPortDataType(S, 945, SS_UINT8); 
ssSetOutputPortWidth(S, 945, 1); 
ssSetOutputPortDataType(S, 946, SS_UINT8); 
ssSetOutputPortWidth(S, 946, 1); 
/* CAPTURE MESSAGES 25*/ 
ssSetOutputPortDataType(S, 947, SS_BOOLEAN); 
ssSetOutputPortWidth(S, 947, 1); 
ssSetOutputPortDataType(S, 948, SS_DOUBLE); 
ssSetOutputPortWidth(S, 948, 1); 
ssSetOutputPortDataType(S, 949, SS_UINT32); 
ssSetOutputPortWidth(S, 949, 1); 
ssSetOutputPortDataType(S, 950, SS_UINT8); 
ssSetOutputPortWidth(S, 950, 1); 
ssSetOutputPortDataType(S, 951, SS_UINT8); 
ssSetOutputPortWidth(S, 951, 1); 
ssSetOutputPortDataType(S, 952, SS_UINT8); 
ssSetOutputPortWidth(S, 952, 1); 
ssSetOutputPortDataType(S, 953, SS_UINT8); 
ssSetOutputPortWidth(S, 953, 1); 
ssSetOutputPortDataType(S, 954, SS_UINT8); 
ssSetOutputPortWidth(S, 954, 1); 
ssSetOutputPortDataType(S, 955, SS_UINT8); 
ssSetOutputPortWidth(S, 955, 1); 
ssSetOutputPortDataType(S, 956, SS_UINT8); 
ssSetOutputPortWidth(S, 956, 1); 
ssSetOutputPortDataType(S, 957, SS_UINT8); 
ssSetOutputPortWidth(S, 957, 1); 
ssSetOutputPortDataType(S, 958, SS_UINT8); 
ssSetOutputPortWidth(S, 958, 1); 
ssSetOutputPortDataType(S, 959, SS_UINT8); 
ssSetOutputPortWidth(S, 959, 1); 
