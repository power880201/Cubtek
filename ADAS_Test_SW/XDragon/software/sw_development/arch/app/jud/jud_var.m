% =========== $Update Time : 26-Jun-2017 14:16:30 $  =========
disp('Loading $Id: jud_var.m 1597 2017-07-17 06:39:01Z bcluan $')

%% Calibration Name, Units, Min, Max, Data Type, Comment
a2l_par('KJUD_DriverReactionDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'' );
a2l_par('KJUD_BrakeSupportDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'' );
a2l_par('KJUD_FCWMinActSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_FCWMaxActSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_FCWMinDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_FCWMaxDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_AEBMinActSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_AEBMaxActSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_AEBMinDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_AEBMaxDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_EarlyTtcDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_NormalTtcDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_LateTtcDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_FCWAggrDriverDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_FCWActiveDriverDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_AEBAggrDriverDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_AEBActiveDriverDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_BrakePreFillDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_AutoBrakingDelay_ms', 	'ms', 	-6000, 	6000, 	'single', 	'' );
a2l_par('KJUD_FCWConsideredDecel_mps2', 	'mps2', 	0, 	15, 	'single', 	'' );
a2l_par('KJUD_AEBConsideredDecel_mps2', 	'mps2', 	0, 	15, 	'single', 	'' );
a2l_par('KJUD_ACCMinActSpeed_kph', 	'kph', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_ACCMaxActSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCMaxDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCMinDeactSpeed_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCMaxTimeGap_s', 	'sec', 	0, 	20, 	'single', 	'' );
a2l_par('KJUD_ACCMediumTimeGap_s', 	'sec', 	0, 	20, 	'single', 	'' );
a2l_par('KJUD_ACCShortTimeGap_s', 	'sec', 	0, 	20, 	'single', 	'' );
a2l_par('KJUD_ACCMinTimeGap_s', 	'sec', 	0, 	20, 	'single', 	'' );
a2l_par('KJUD_ACCVehReadyTimer_ms', 	'ms', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_ACCSpeedInc_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCLargeSpeedInc_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCSpeedDec_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCLargeSpeedDec_kph', 	'kph', 	0, 	200, 	'single', 	'' );
a2l_par('KJUD_ACCNumOfTimeGaps_pos', 	'position', 	0, 	10, 	'single', 	'' );
a2l_par('KJUD_ACCSpdModifTimer_ms', 	'ms', 	0, 	2000, 	'single', 	'' );
a2l_par('KJUD_ACCDeactVehSpeed_kph', 	'kph', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_ACCTimeGapDelay_ms', 	'ms', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_ACCOverrideTimer_s', 	's', 	0, 	20000, 	'single', 	'' );
a2l_par('KJUD_FCWDeactVehSpeed_mps', 	'mps', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_FCWReturnOpRelSpeedX_kph', 	'kph', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_FCWReturnOpVehClearance_m', 	'm', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_AEBDeactVehSpeed_mps', 	'mps', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_AEBVehAssignTimer_ms', 	'ms', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_FCWVehAssignTimer_ms', 	'ms', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_AEBReturnOpRelSpeedX_kph', 	'kph', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_AEBReturnOpVehClearance_m', 	'm', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_DecelThreshBraking_mps2', 	'mps2', 	0, 	15, 	'single', 	'' );
a2l_par('KJUD_MinAccelPedalPosn_pct', 	'pct', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_SDFDelay_s', 	's', 	0, 	10, 	'single', 	'' );
a2l_par('KJUD_DecelTGapBraking_s', 	's', 	0, 	10, 	'single', 	'' );
a2l_par('KJUD_ACCThrottleToStart_pct', 	'pct', 	0, 	100, 	'single', 	'' );
a2l_par('KJUD_ACCAutoRefollowTimer_ms', 	'ms', 	0, 	10000, 	'single', 	'' );
a2l_par('KJUD_ACCClearanceToStartMargin_m', 	'm', 	0, 	20, 	'single', 	'' );
a2l_par('KJUD_ACCVehAssignMaintTime_ms', 	'ms', 	0, 	2000, 	'single', 	'' );
a2l_par('KJUD_EPSLimition_kph', 	'kph', 	0, 	30, 	'single', 	'' );
a2l_par('KJUD_EPSLimitionHysis_kph', 	'kph', 	0, 	30, 	'single', 	'' );
a2l_par('KJUD_LFC4StandbyDelay_s', 	's', 	0, 	3, 	'single', 	'' );
a2l_par('KJUD_SoftenTimerThr_s', 	's', 	0, 	2, 	'single', 	'' );
a2l_par('VJUD_LFCOffCount4LKAStandby_s', 	's', 	0, 	2, 	'single', 	'' );
a2l_par('VJUD_LKAReActingDelay_s', 	's', 	0, 	2, 	'single', 	'' );
a2l_par('VJUD_TLCTriggerReActingDelay_s', 	's', 	0, 	2, 	'single', 	'' );

%% Monitored Signals
% Module Signals %
a2l_mon('VJUD_FCWDriverSelecDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'',	1 );
a2l_mon('VJUD_FCWDriverBehavDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'',	1 );
a2l_mon('VJUD_FCWDriverBrakeDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'',	1 );
a2l_mon('VJUD_AEBDriverBehavDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'',	1 );
a2l_mon('VJUD_AEBAutoBrakDelay_ms', 	'ms', 	0, 	6000, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCVehReadyToStart_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCSpeedInRange_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCSetTimeGapSelected_s', 	'sec', 	0, 	10, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCSpeedMTorqueReq_Nm', 	'Nm', 	0, 	100, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCFollowMTorqueReq_Nm', 	'Nm', 	0, 	100, 	'single', 	'',	1 );
a2l_mon('VJUD_AEBVehAssigned_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWVehAssigned_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FreeRunningTime_sec', 	'sec', 	0, 	100, 	'single', 	'',	1 );
a2l_mon('VJUD_VehPointToBrake_m', 	'm', 	0, 	300, 	'single', 	'',	1 );
a2l_mon('VJUD_VRUPointToBrake_m', 	'm', 	0, 	300, 	'single', 	'',	1 );
a2l_mon('VJUD_PointToBrake_m', 	'm', 	0, 	300, 	'single', 	'',	1 );
a2l_mon('VJUD_FCWTargetAssigned_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWFreeRunningTime_sec', 	'sec', 	0, 	100, 	'single', 	'',	1 );
a2l_mon('VJUD_FCWVehPointToWarn_m', 	'm', 	0, 	300, 	'single', 	'',	1 );

% Output Signals %
a2l_mon('VJUD_FCWEnableReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWOperational_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWSpeedInRange_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWReturnOperational_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWDeactivationReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_FCWDBSAllowed_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBEnableReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBOperational_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBSpeedInRange_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBReturnOperational_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBAutoBraking_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_AEBDeactivationReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCEnableReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCActiveReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCDeactivationReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCStandstillReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCRefollowReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCOverrideReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_ACCSetSpeed_kph', 	'kph', 	0, 	10000, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCSetTimeGap_s', 	'sec', 	0, 	10000, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCHMISelTimeGap_s', 	'sec', 	0, 	10000, 	'single', 	'',	1 );
a2l_mon('VJUD_ACCSetSpeedSel_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCCheckNormal_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCCheckNormalFailure_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCEnabledReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCDegradedReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCSoftenReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCTempFailureReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCNoADASFailure_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCOffRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_DegradedToAutoStr_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LFCTempFailureRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_SoftenTimeThr_s', 	's', 	0, 	10000, 	'single', 	'',	1 );
a2l_mon('VJUD_LKACheckNormal_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKACheckNormalFailure_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKAEnabledReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKAOperationalReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKALeftActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKARightActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKATempFailureReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKANoADASFailure_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKAOffRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKAStandbyRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKALeftOperationalRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKARightOperationalRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LKATempFailureRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCACheckNormal_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCAEnabledReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCAOperationalReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCALeftActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCARightActionReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCATempFailureReq_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCANoADASFailure_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCAOffRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCAStandbyRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCALeftOperationalRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCARightOperationalRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
a2l_mon('VJUD_LCATempFailureRecover_flg', 	'flg', 	0, 	1, 	'boolean', 	'',	1 );
